<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>七大原则——依赖倒转原则</title>
      <link href="/2020/08/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、单例模式"><a href="#一、单例模式" class="headerlink" title="一、单例模式"></a>一、单例模式</h2><p>&emsp;&emsp;所谓单例，就是整个程序有且仅有一个实例。该类负责创建自己的对象，同时确保只有一个对象被创建。</p><p>&emsp;&emsp;单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>&emsp;&emsp;这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。比如Hibernate的sessionFactory,它充当数据存储源的代理，并负责创建session对象，显然这并不是轻量级的对象，通常情况下，一般只需要一个sessionFactory就够了，此时就应用了单例模式了</p><h3 id="1、作用："><a href="#1、作用：" class="headerlink" title="1、作用："></a>1、作用：</h3><p>&emsp;&emsp;保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><h3 id="2、解决的问题："><a href="#2、解决的问题：" class="headerlink" title="2、解决的问题："></a>2、解决的问题：</h3><p>&emsp;&emsp;一个全局使用的类频繁地创建与销毁。</p><h3 id="3、何时使用："><a href="#3、何时使用：" class="headerlink" title="3、何时使用："></a>3、何时使用：</h3><p>&emsp;&emsp;当您想控制实例数目，节省系统资源的时候。</p><h3 id="4、如何使用："><a href="#4、如何使用：" class="headerlink" title="4、如何使用："></a>4、如何使用：</h3><p>&emsp;&emsp;判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><h2 id="二、单例模式的实现"><a href="#二、单例模式的实现" class="headerlink" title="二、单例模式的实现"></a>二、单例模式的实现</h2><ul><li>饿汉式<ul><li>静态常量</li><li>静态代码块</li></ul></li><li>懒汉式<ul><li>传统懒汉式</li><li>同步方法</li><li>同步代码块（省略）</li></ul></li><li>双重检查</li><li>静态内部类</li><li>枚举<h3 id="1、写法一（饿汉式——静态常量）"><a href="#1、写法一（饿汉式——静态常量）" class="headerlink" title="1、写法一（饿汉式——静态常量）"></a>1、写法一（饿汉式——静态常量）</h3><h4 id="a、步骤"><a href="#a、步骤" class="headerlink" title="a、步骤"></a>a、步骤</h4>Ⅰ、构造器私有化</li></ul><p>Ⅱ、类的内部创建对象</p><p>Ⅲ、对外提供一个静态的公共方法（getInstance）</p><h4 id="b、代码实现"><a href="#b、代码实现" class="headerlink" title="b、代码实现"></a>b、代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//饿汉模式——静态常量</span><span class="token keyword">class</span> <span class="token class-name">StaticFinalSingleton</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器私有化</span>    <span class="token keyword">private</span> <span class="token function">StaticFinalSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//类的内部创建对象</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> StaticFinalSingleton instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticFinalSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对外提供一个静态的公共方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> StaticFinalSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="c、测试代码"><a href="#c、测试代码" class="headerlink" title="c、测试代码"></a>c、测试代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStaticFinalSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"饿汉式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StaticFinalSingleton singleton01 <span class="token operator">=</span> StaticFinalSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StaticFinalSingleton singleton02 <span class="token operator">=</span> StaticFinalSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleton01 <span class="token operator">==</span> singleton02<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton01.hashcode="</span> <span class="token operator">+</span> singleton01<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton02.hashcode="</span> <span class="token operator">+</span> singleton02<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="d、运行结果"><a href="#d、运行结果" class="headerlink" title="d、运行结果"></a>d、运行结果</h4><pre><code>&quot;饿汉式&quot;truesingleton01.hashcode=1555093762singleton02.hashcode=1555093762</code></pre><h4 id="e、分析"><a href="#e、分析" class="headerlink" title="e、分析"></a>e、分析</h4><p>Ⅰ、优点：</p><p>&emsp;&emsp;写法简单，在类装载的时候完成实例化，避免了线程同步</p><p>Ⅱ、缺点：</p><p>&emsp;&emsp;没有达到lazy loading的效果，如果从始至终没有使用到这个类的话，就造成了内存浪费</p><p>Ⅲ、总结：</p><p>&emsp;&emsp;这种方式基于classloder机制避免了多线程同步的问题，不过，instance在装载类时就实例化，在单例模式中大多都是调用getInstance方法，但是导致类装载的原因有很多种，因此不确定有没有其他的方式，或者其他的静态方法导致类装载，这时候初始化instance就没有达到lazy loading效果，所以虽然这种单例模式可用，但也有可能造成内存浪费</p><h3 id="2、写法二（饿汉式——静态代码块）"><a href="#2、写法二（饿汉式——静态代码块）" class="headerlink" title="2、写法二（饿汉式——静态代码块）"></a>2、写法二（饿汉式——静态代码块）</h3><h4 id="a、步骤-1"><a href="#a、步骤-1" class="headerlink" title="a、步骤"></a>a、步骤</h4><p>Ⅰ、构造器私有化</p><p>Ⅱ、类的内部声明单例对象</p><p>Ⅲ、在代码块中、创建单例对象</p><p>Ⅳ、对外提供一个静态的公共方法（getInstance）</p><h4 id="b、代码实现-1"><a href="#b、代码实现-1" class="headerlink" title="b、代码实现"></a>b、代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//饿汉模式——静态代码块</span><span class="token keyword">class</span> <span class="token class-name">StaticCodeSingleton</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器私有化</span>    <span class="token keyword">private</span> <span class="token function">StaticCodeSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//类的内部声明单例对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> StaticCodeSingleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在代码块中、创建单例对象</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticCodeSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对外提供一个静态的公共方法（getInstance）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> StaticCodeSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="c、测试代码-1"><a href="#c、测试代码-1" class="headerlink" title="c、测试代码"></a>c、测试代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStaticCodeSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"饿汉式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StaticCodeSingleton singleton01 <span class="token operator">=</span> StaticCodeSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StaticCodeSingleton singleton02 <span class="token operator">=</span> StaticCodeSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleton01 <span class="token operator">==</span> singleton02<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton01.hashcode="</span> <span class="token operator">+</span> singleton01<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton02.hashcode="</span> <span class="token operator">+</span> singleton02<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="d、运行结果-1"><a href="#d、运行结果-1" class="headerlink" title="d、运行结果"></a>d、运行结果</h4><pre><code>饿汉式truesingleton01.hashcode=1555093862singleton02.hashcode=1555093862</code></pre><h4 id="e、分析-1"><a href="#e、分析-1" class="headerlink" title="e、分析"></a>e、分析</h4><p>&emsp;&emsp;这种方式和上面的静态常量其实是类似的，只不过实例化的方式放在了静态代码块中，也是在类装载的时候，就执行静态代码块的中的代码，所以它的优缺点其实和静态常量是差不多的，所以这种方式可用，但是也会造成内存浪费</p><h3 id="3、写法三（懒汉式——传统懒汉式）"><a href="#3、写法三（懒汉式——传统懒汉式）" class="headerlink" title="3、写法三（懒汉式——传统懒汉式）"></a>3、写法三（懒汉式——传统懒汉式）</h3><h4 id="a、步骤-2"><a href="#a、步骤-2" class="headerlink" title="a、步骤"></a>a、步骤</h4><p>Ⅰ、构造器私有化</p><p>Ⅱ、类的内部声明单例对象</p><p>Ⅲ、提供一个静态的公有方法</p><p>Ⅳ、调用时判断是否已存在此类对象</p><h4 id="b、代码实现-2"><a href="#b、代码实现-2" class="headerlink" title="b、代码实现"></a>b、代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//懒汉式——传统懒汉式</span><span class="token keyword">class</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器私有化</span>    <span class="token keyword">private</span> <span class="token function">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//类的内部声明单例对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazySingleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供一个静态的公有方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazySingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用时判断是否已存在此类对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="c、测试代码-2"><a href="#c、测试代码-2" class="headerlink" title="c、测试代码"></a>c、测试代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LazySingleton singleton01 <span class="token operator">=</span> LazySingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LazySingleton singleton02 <span class="token operator">=</span> LazySingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleton01 <span class="token operator">==</span> singleton02<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton01.hashcode="</span> <span class="token operator">+</span> singleton01<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton02.hashcode="</span> <span class="token operator">+</span> singleton02<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="d、运行结果-2"><a href="#d、运行结果-2" class="headerlink" title="d、运行结果"></a>d、运行结果</h4><pre><code>懒汉式truesingleton01.hashcode=1555093762singleton02.hashcode=1555093762</code></pre><h4 id="e、分析-2"><a href="#e、分析-2" class="headerlink" title="e、分析"></a>e、分析</h4><p>Ⅰ、优点</p><p>&emsp;&emsp;确实起到了lazy loading效用</p><p>Ⅱ、缺点</p><p>&emsp;&emsp;但只能在单线程的情况下使用，即线程不安全</p><p>Ⅲ、结论</p><p>&emsp;&emsp;虽然实现了lazy loading，但是对于项目来说，这种方式可用性不高</p><h3 id="4、写法四（懒汉式——同步方法）"><a href="#4、写法四（懒汉式——同步方法）" class="headerlink" title="4、写法四（懒汉式——同步方法）"></a>4、写法四（懒汉式——同步方法）</h3><h4 id="a、步骤-3"><a href="#a、步骤-3" class="headerlink" title="a、步骤"></a>a、步骤</h4><p>Ⅰ、构造器私有化</p><p>Ⅱ、类的内部声明单例对象</p><p>Ⅲ、提供一个静态的公有方法同时给他上锁</p><p>Ⅳ、调用时判断是否已存在此类对象</p><h4 id="b、代码实现-3"><a href="#b、代码实现-3" class="headerlink" title="b、代码实现"></a>b、代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LazySynchronizedMethodSingleton</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器私有化</span>    <span class="token keyword">private</span> <span class="token function">LazySynchronizedMethodSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//类的内部声明单例对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> LazySynchronizedMethodSingleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提供一个静态的公有方法同时给他上锁</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> LazySynchronizedMethodSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用时判断是否已存在此类对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySynchronizedMethodSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="c、测试代码-3"><a href="#c、测试代码-3" class="headerlink" title="c、测试代码"></a>c、测试代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLazySynchronizedMethodSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"懒汉式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LazySynchronizedMethodSingleton singleton01 <span class="token operator">=</span> LazySynchronizedMethodSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LazySynchronizedMethodSingleton singleton02 <span class="token operator">=</span> LazySynchronizedMethodSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleton01 <span class="token operator">==</span> singleton02<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton01.hashcode="</span> <span class="token operator">+</span> singleton01<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton02.hashcode="</span> <span class="token operator">+</span> singleton02<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="d、运行结果-3"><a href="#d、运行结果-3" class="headerlink" title="d、运行结果"></a>d、运行结果</h4><pre><code>懒汉式truesingleton01.hashcode=1555093762singleton02.hashcode=1555093762</code></pre><h4 id="e、分析-3"><a href="#e、分析-3" class="headerlink" title="e、分析"></a>e、分析</h4><p>Ⅰ、优点</p><p>&emsp;&emsp;起到了lazy loading效用,同时解决了线程不安全的问题</p><p>Ⅱ、缺点</p><p>&emsp;&emsp;但是因为加了synchronized锁，所以每一次执行getInstance方法时都需要进行同步处理</p><p>Ⅲ、结论</p><p>&emsp;&emsp;在实际开发种并不推荐这种方式</p><h3 id="5、写法五（双重检查）"><a href="#5、写法五（双重检查）" class="headerlink" title="5、写法五（双重检查）"></a>5、写法五（双重检查）</h3><h4 id="a、步骤-4"><a href="#a、步骤-4" class="headerlink" title="a、步骤"></a>a、步骤</h4><p>Ⅰ、构造器私有化</p><p>Ⅱ、类的内部使用volatile声明单例对象</p><p>Ⅲ、对外提供一个静态的公共方法（getInstance）</p><p>Ⅳ、在方法中判断单例对象是否为空</p><p>Ⅴ、使用synchronized同步代码块</p><p>Ⅵ、代码块中继续判断单例对象是否为空</p><h4 id="b、代码实现-4"><a href="#b、代码实现-4" class="headerlink" title="b、代码实现"></a>b、代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DuplicationCheckSingleton</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器私有化</span>    <span class="token keyword">private</span> <span class="token function">DuplicationCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//类的内部使用volatile声明单例对象</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> DuplicationCheckSingleton instance<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对外提供一个静态的公共方法（getInstance）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> DuplicationCheckSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在方法中判断单例对象是否为空，如果不等于空直接返回对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//使用synchronized同步代码块。假如多个线程进入则再判断一次</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DuplicationCheckSingleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//代码块中继续判断单例对象是否为空</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DuplicationCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="c、测试代码-4"><a href="#c、测试代码-4" class="headerlink" title="c、测试代码"></a>c、测试代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDuplicationCheckSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"双重检查"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DuplicationCheckSingleton singleton01 <span class="token operator">=</span> DuplicationCheckSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DuplicationCheckSingleton singleton02 <span class="token operator">=</span> DuplicationCheckSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleton01 <span class="token operator">==</span> singleton02<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton01.hashcode="</span> <span class="token operator">+</span> singleton01<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton02.hashcode="</span> <span class="token operator">+</span> singleton02<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="d、运行结果-4"><a href="#d、运行结果-4" class="headerlink" title="d、运行结果"></a>d、运行结果</h4><pre><code>双重检查truesingleton01.hashcode=1555093762singleton02.hashcode=1555093762</code></pre><h4 id="e、分析-4"><a href="#e、分析-4" class="headerlink" title="e、分析"></a>e、分析</h4><p>总结</p><p>&emsp;&emsp;起到了lazy loading效用,同时解决了线程不安全的问题,也提高了效率，Double-Check的概念是多线程开发中经常用到的。</p><p>&emsp;&emsp;</p><h3 id="6、写法六（静态内部类）"><a href="#6、写法六（静态内部类）" class="headerlink" title="6、写法六（静态内部类）"></a>6、写法六（静态内部类）</h3><h4 id="a、步骤-5"><a href="#a、步骤-5" class="headerlink" title="a、步骤"></a>a、步骤</h4><p>Ⅰ、构造器私有化</p><p>Ⅱ、创建一个静态内部类</p><p>Ⅲ、静态内部类定义一个实例化类属性</p><p>Ⅳ、使用getInstance返回静态内部类中实例化的类</p><h4 id="b、代码实现-5"><a href="#b、代码实现-5" class="headerlink" title="b、代码实现"></a>b、代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">StaticInnerClassSingleton</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构造器私有化</span>    <span class="token keyword">private</span> <span class="token function">StaticInnerClassSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建一个静态内部类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonInstance</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//静态内部类定义一个单例的静态类属性，并且实例化该类</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> StaticInnerClassSingleton INSTANCE <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">StaticInnerClassSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用getInstance返回静态内部类中实例化的类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> StaticInnerClassSingleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonInstance<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="c、测试代码-5"><a href="#c、测试代码-5" class="headerlink" title="c、测试代码"></a>c、测试代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStaticInnerClassSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态内部类"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>StaticInnerClassSingleton singleton01 <span class="token operator">=</span> StaticInnerClassSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>StaticInnerClassSingleton singleton02 <span class="token operator">=</span> StaticInnerClassSingleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleton01 <span class="token operator">==</span> singleton02<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton01.hashcode="</span> <span class="token operator">+</span> singleton01<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton02.hashcode="</span> <span class="token operator">+</span> singleton02<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="d、运行结果-5"><a href="#d、运行结果-5" class="headerlink" title="d、运行结果"></a>d、运行结果</h4><pre><code>静态内部类truesingleton01.hashcode=1555093762singleton02.hashcode=1555093762</code></pre><h4 id="e、分析-5"><a href="#e、分析-5" class="headerlink" title="e、分析"></a>e、分析</h4><p>Ⅰ、这种方式采用了类装载的机制来保证初始化实例只有一个线程<br>Ⅱ、静态内部类在StaticInnerClassSingleton装载时并不会立即实例化，而是需要实例化时才调用getInstance方法，从而装载SingletonInstance类，从而实现StaticInnerClassSingleton类的实例化<br>Ⅲ、类的静态属性只会在第一次加载类时初始化，所以在这里，其实时JVM在保证线程的安全性，因为在类的初始化时，别的线程是无法进入的<br>Ⅳ、这种方式实现了懒加载，解决了线程安全性、效率高，所以推荐使用</p><h3 id="7、写法七（枚举）"><a href="#7、写法七（枚举）" class="headerlink" title="7、写法七（枚举）"></a>7、写法七（枚举）</h3><h4 id="a、代码实现"><a href="#a、代码实现" class="headerlink" title="a、代码实现"></a>a、代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">enum</span> EnumSingleton<span class="token punctuation">{</span>    ENUM_SINGLETON<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="b、测试代码"><a href="#b、测试代码" class="headerlink" title="b、测试代码"></a>b、测试代码</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testEnumSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"枚举"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EnumSingleton singleton01 <span class="token operator">=</span> EnumSingleton<span class="token punctuation">.</span>ENUM_SINGLETON<span class="token punctuation">;</span>    EnumSingleton singleton02 <span class="token operator">=</span> EnumSingleton<span class="token punctuation">.</span>ENUM_SINGLETON<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>singleton01 <span class="token operator">==</span> singleton02<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton01.hashcode="</span> <span class="token operator">+</span> singleton01<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singleton02.hashcode="</span> <span class="token operator">+</span> singleton02<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="c、运行结果"><a href="#c、运行结果" class="headerlink" title="c、运行结果"></a>c、运行结果</h4><pre><code>枚举truesingleton01.hashcode=1555093762singleton02.hashcode=1555093762</code></pre><h4 id="d、分析"><a href="#d、分析" class="headerlink" title="d、分析"></a>d、分析</h4><p>&emsp;&emsp;这种方式使用了枚举，避免了多线程同步的问题，而且还能防止反序列化重新创建新的对象，而且这种方式还是Effective java作者Josh Bloch所提倡的</p><h2 id="三、单例模式的优缺点"><a href="#三、单例模式的优缺点" class="headerlink" title="三、单例模式的优缺点"></a>三、单例模式的优缺点</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol><li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</li><li>避免对资源的多重占用（比如写文件操作）。<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3></li><li>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</li></ol><h2 id="四、使用场景和应用实例"><a href="#四、使用场景和应用实例" class="headerlink" title="四、使用场景和应用实例"></a>四、使用场景和应用实例</h2><h3 id="1、使用场景："><a href="#1、使用场景：" class="headerlink" title="1、使用场景："></a>1、使用场景：</h3><ol><li>要求生产唯一序列号。</li><li>WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。</li><li>创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</li><li>需要频繁创建和销毁的对象，创建对象耗时过多或消耗资源过多（重量级对象）<h3 id="2、应用实例"><a href="#2、应用实例" class="headerlink" title="2、应用实例"></a>2、应用实例</h3></li><li>Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。</li><li>一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。<h3 id="3、JDK的应用"><a href="#3、JDK的应用" class="headerlink" title="3、JDK的应用"></a>3、JDK的应用</h3><img src="https://s1.ax1x.com/2020/09/19/w57Z6I.png" alt="w57Z6I.png" loading="lazy"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 设计模式七大原则 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>七大原则——合成复用原则</title>
      <link href="/2020/08/17/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/"/>
      <url>/2020/08/17/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%90%88%E6%88%90%E5%A4%8D%E7%94%A8%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>&emsp;&emsp;原则是尽量采用合成/聚合的方式。而不是使用继承</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 设计模式七大原则 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>七大原则——迪米特法则</title>
      <link href="/2020/08/16/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/"/>
      <url>/2020/08/16/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E6%B3%95%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><h3 id="1、迪米特法则定义"><a href="#1、迪米特法则定义" class="headerlink" title="1、迪米特法则定义"></a>1、迪米特法则定义</h3><p>&emsp;&emsp;迪米特法则（Law of Demeter，LoD）又叫作最少知道原则（Least Knowledge Principle，LKP)，产生于 1987 年美国东北大学（Northeastern University）的一个名为迪米特（Demeter）的研究项目，由伊恩·荷兰（Ian Holland）提出，被 UML 创始者之一的布奇（Booch）普及，后来又因为在经典著作《程序员修炼之道》（The Pragmatic Programmer）提及而广为人知。</p><p>&emsp;&emsp;简单来说：对于被依赖的类有多复杂，都尽量将复杂的逻辑封装在类的内部，除了对外提供的public方法，不外泄任何信息。迪米特法则还有一个更为简单的定义即——只与直接的朋友通信</p><h3 id="2、直接的朋友"><a href="#2、直接的朋友" class="headerlink" title="2、直接的朋友"></a>2、直接的朋友</h3><p>&emsp;&emsp;每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，就可以认为这两个对象之间是朋友关系。而耦合的方式有很多比如：依赖、关联、组合、聚合等。其中，我们称出现在成员变量，方法参数，方法返回值中的类为直接的朋友。而出现在局部变量中的类不是直接的朋友。换句话说，陌生的类最好不要以局部变量的形式出现在类的内部</p><h3 id="3、使用迪米特法则的好处"><a href="#3、使用迪米特法则的好处" class="headerlink" title="3、使用迪米特法则的好处"></a>3、使用迪米特法则的好处</h3><ol><li>降低了类之间的耦合度，提高了模块的相对独立性</li><li>由于亲合度降低，从而提高了类的可复用率和系统的扩展性。</li></ol><p style="color: red;">注意：过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。</p><h2 id="二、代码示例"><a href="#二、代码示例" class="headerlink" title="二、代码示例"></a>二、代码示例</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Girl</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boy</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GirlCount</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模拟女孩</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Girl<span class="token operator">></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Girl<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Girl girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            girl<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"girl"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//让男孩统计总人数</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BoyCount</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模拟男孩</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Boy<span class="token operator">></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Boy<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Boy boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            boy<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"boy"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取男女孩总数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCount</span><span class="token punctuation">(</span>GirlCount girlCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Girl<span class="token operator">></span> girls <span class="token operator">=</span> girlCount<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有女孩>>>>>>>>>>>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Girl girl<span class="token operator">:</span> girls<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Boy<span class="token operator">></span> boys <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有男孩>>>>>>>>>>>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Boy boy<span class="token operator">:</span> boys<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoD01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//测试运行</span>        BoyCount boyCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoyCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boyCount<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GirlCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre><code>    所有女孩&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    girl0    girl1    girl2    ....    所有男孩&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    boy0    boy1    ....</code></pre><p>&emsp;&emsp;这时我们发现让男孩去统计总数的getCount方法中有一个Girl类。而这个方法中是统计所有的男孩女孩。现在将统计女孩的实现也写在了统计男孩的类中。这违背了迪米特法则，应该将统计女孩的实现放在统计女孩的类中，再在统计男孩的类中调用即可</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">GirlCount</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模拟女孩</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Girl<span class="token operator">></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Girl<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Girl girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Girl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            girl<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"girl"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取女孩总数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getGirlCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Girl<span class="token operator">></span> girls <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有女孩>>>>>>>>>>>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Girl girl<span class="token operator">:</span> girls<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">BoyCount</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模拟男孩</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Boy<span class="token operator">></span> <span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Boy<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Boy boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            boy<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"boy"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取男孩总数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBoyCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Boy<span class="token operator">></span> boys <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所有男孩>>>>>>>>>>>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Boy boy<span class="token operator">:</span> boys<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取男女孩总数</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBoyAndGirlCount</span><span class="token punctuation">(</span>GirlCount girlCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        girlCount<span class="token punctuation">.</span><span class="token function">getGirlCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBoyCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoD01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//测试运行</span>        BoyCount boyCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BoyCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        boyCount<span class="token punctuation">.</span><span class="token function">getBoyAndGirlCount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GirlCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre><code>    所有女孩&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    girl0    girl1    girl2    ....    所有男孩&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;    boy0    boy1    ....</code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 设计模式七大原则 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>七大原则——开闭原则</title>
      <link href="/2020/08/15/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
      <url>/2020/08/15/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><h3 id="1、开闭原则的定义"><a href="#1、开闭原则的定义" class="headerlink" title="1、开闭原则的定义"></a>1、开闭原则的定义</h3><p>&emsp;&emsp;开闭原则（Open Closed Principle，OCP）由勃兰特·梅耶（Bertrand Meyer）提出，他在 1988 年的著作《面向对象软件构造》（Object Oriented Software Construction）中提出：软件实体应当对扩展开放，对修改关闭（Software entities should be open for extension，but closed for modification），这就是开闭原则的经典定义。</p><p>&emsp;&emsp;开闭原则明确的告诉我们：软件实现应该对扩展（提供方）开放，对修改（使用方）关闭，用抽象构建框架，用实现扩展细节。其含义是告诉我们应尽量通过扩展软件实体的行为来实现变化，而不是通过修改现有代码来完成变化，它是为软件实体的未来事件而制定的对现行开发设计进行约束的一个原则一个软件产品只要在生命周期内，都会发生变化，即然变化是一个事实，我们就应该在设计时尽量适应这些变化，以提高项目的稳定性和灵活性，真正实现“拥抱变化”。</p><h3 id="2、为什么使用开闭原则"><a href="#2、为什么使用开闭原则" class="headerlink" title="2、为什么使用开闭原则"></a>2、为什么使用开闭原则</h3><ol><li><p>只要是面向对象的编程，在开发过程中都会强调开闭原则</p></li><li><p>是最基础的设计原则，其他五个设计原则都是开闭原则的具体形态</p></li><li><p>可以提高代码的复用性</p></li><li><p>可以提高代码的可维护性</p></li></ol><h3 id="3、如何使用开闭原则"><a href="#3、如何使用开闭原则" class="headerlink" title="3、如何使用开闭原则"></a>3、如何使用开闭原则</h3><ol><li><p>抽象约束</p><pre><code> 抽象是对一组事物的通用描述，没有具体的实现，也就表示它可以有非常多的可能性，可以跟随需求的变化而变化。因此，通过接口或抽象类可以约束一组可能变化的行为，并且能够实现对扩展开放，其包含三层含义： 1、通过接口或抽象类约束扩散，对扩展进行边界限定，不允许出现在接口或抽象类中不存在的public方法。 2、参数类型，引用对象尽量使用接口或抽象类，而不是实现类，这主要是实现里氏替换原则的一个要求 3、抽象层尽量保持稳定，一旦确定就不要修改</code></pre></li><li><p>元数据控件模块行为　　</p><pre><code> 编程是一个很苦很累的活，那怎么才能减轻压力呢？答案是尽量使用元数据来控制程序的行为，减少重复开发。什么是元数据？用来描述环境和数据的数据，通俗的说就是配置参数，参数可以从文件中获得，也可以从数据库中获得</code></pre></li><li><p>制定项目章程</p><pre><code> 在一个团队中，建立项目章程是非常重要的，因为章程是所有开发人员都必须遵守的约定，对项目来说，约定优于配置。这比通过接口或抽象类进行约束效率更高，而扩展性一点也没有减少</code></pre></li><li><p>封装变化</p><pre><code> 将相同的变化封装到一个接口或抽象类中，将不同的变化封装到不同的接口或抽象类中，不应该有两个不同变化出现在同一个接口或抽象类中。</code></pre></li></ol><p>上述如何使用开闭原则来源于：<a href="https://blog.csdn.net/qwezhaohaihong/article/details/78471673" target="_blank" rel="noopener">https://blog.csdn.net/qwezhaohaihong/article/details/78471673</a></p><h2 id="一、代码案例"><a href="#一、代码案例" class="headerlink" title="一、代码案例"></a>一、代码案例</h2><p>未使用开闭原则的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>OCP<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpenAndClose01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MakeVehicle makeVehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeVehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        makeVehicle<span class="token punctuation">.</span><span class="token function">MakeVehicleByvType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Vehicle</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> vType<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>vType <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bus</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Bus</span><span class="token punctuation">(</span><span class="token keyword">int</span> vType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>vType <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MakeVehicle</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">MakeVehicleByvType</span><span class="token punctuation">(</span>Vehicle vehicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vehicle<span class="token punctuation">.</span>vType <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">makeCar</span><span class="token punctuation">(</span>vehicle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>vehicle<span class="token punctuation">.</span>vType <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">makeBus</span><span class="token punctuation">(</span>vehicle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeCar</span><span class="token punctuation">(</span>Vehicle vehicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制造公共汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeBus</span><span class="token punctuation">(</span>Vehicle vehicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制造公共汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre><code>    制造小汽车</code></pre><p>这是如果我们想要增加一个制造摩托车的需求，则需要改变MakeVehicle类里面的很多方法</p><p>使用开闭原则的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>OCP<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OpenAndClose02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MakeVehicle02 makeVehicle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MakeVehicle02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        makeVehicle<span class="token punctuation">.</span><span class="token function">MakeVehicle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Car02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        makeVehicle<span class="token punctuation">.</span><span class="token function">MakeVehicle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Bus02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        makeVehicle<span class="token punctuation">.</span><span class="token function">MakeVehicle</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Motorcycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Vehicle02</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> vType<span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">makeVehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Car02</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Car02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>vType <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeVehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制造小汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Bus02</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Bus02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>vType <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeVehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制造公共汽车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Motorcycle</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Motorcycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>vType <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeVehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"制造摩托车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MakeVehicle02</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">MakeVehicle</span><span class="token punctuation">(</span>Vehicle02 vehicle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        vehicle<span class="token punctuation">.</span><span class="token function">makeVehicle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre><code>    制造小汽车    制造公共汽车    制造摩托车</code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 设计模式七大原则 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>七大原则——接口隔离原则</title>
      <link href="/2020/08/14/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/"/>
      <url>/2020/08/14/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是接口隔离原则"><a href="#一、什么是接口隔离原则" class="headerlink" title="一、什么是接口隔离原则"></a>一、什么是接口隔离原则</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>&emsp;&emsp;客户端不应该依赖它不需要的接口（Clients should not be forced to depend upon interfaces that they don’t use）。</p><p>&emsp;&emsp;类间的依赖关系应该建立在最小的接口上（The dependency of one class to another one should depend on the smallest possible interface）。</p><h3 id="释意"><a href="#释意" class="headerlink" title="释意"></a>释意</h3><p>&emsp;&emsp;接口隔离原则是对接口的使用进行约束规范的一个原则，它告诉我们要想把接口用好，关键在于隔离。隔离，指断绝接触、断绝往来。那么我们使用接口时，要隔离什么东西呢？对于上述定义的第1点，“客户端不应该依赖它不需要的接口”，这里的隔离是指客户端和它不需要的接口隔离，也就是客户端不要使用它不需要的接口，这个很容易理解，在实践中也很容易实现。我们着重看一下第2点，“类间的依赖关系应该建立在最小的接口上”，它要求“最小的接口”，也就是该接口中没有多余的方法，所以这里的隔离是指和多余的方法隔离。</p><p>&emsp;&emsp;综上所述，接口隔离原则告诉我们，不要把一大堆方法塞进一个接口里，导致这个接口变得臃肿无比。应该要根据实际需要，让接口中只有用得上的方法，也就是说要细化我们的接口。</p><p>上述来自作者：匆执羊<br>更多可以查看链接：<a href="https://www.jianshu.com/p/4ce9db323348" target="_blank" rel="noopener">https://www.jianshu.com/p/4ce9db323348</a></p><h2 id="二、为什么需要接口隔离原则"><a href="#二、为什么需要接口隔离原则" class="headerlink" title="二、为什么需要接口隔离原则"></a>二、为什么需要接口隔离原则</h2><p>&emsp;&emsp;建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。为类提供专属的接口定制服务。</p><p>&emsp;&emsp;下文例子中，将一个庞大的接口变更为 3 个专用的接口所采用的 就是接口隔离原则。在程序设计中，依赖几个专用的接口要比依赖一 个综合的接口更灵活。接口是设计时对外部设定的“契约”，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。<br>&emsp;&emsp;说到这里，很多人会觉的接口隔离原则跟之前的单一职责原则很相似，其实不然。其一，单一职责原则原注重的是职责；而接口隔离原则注重对接口依赖的隔离。其二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口接口，主要针对抽象，针对程序整体框架的构建。接口的设计粒度越小，系统越灵活，这是不争的事实。</p><h2 id="三、关于接口隔离原则的例子"><a href="#三、关于接口隔离原则的例子" class="headerlink" title="三、关于接口隔离原则的例子"></a>三、关于接口隔离原则的例子</h2><h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p>&emsp;&emsp;定义一个或多个接口，需要有吃、跑、说、飞、游五个方法,定义一个people类和一个动物类，并实现接口中对应的方法，定义一个学生，完成对人类这个类的吃、跑、说方法，定义一个天鹅，完成对动物类中的吃、飞、游方法</p><h3 id="2-方案一"><a href="#2-方案一" class="headerlink" title="2.方案一"></a>2.方案一</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Interface</span><span class="token punctuation">{</span>    String <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token keyword">implements</span> <span class="token class-name">Interface</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在吃饭"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在跑步"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在说话"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在坐飞机"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在游泳"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>Interface <span class="token class-name">anInterface</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生"</span> <span class="token operator">+</span> anInterface<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>Interface <span class="token class-name">anInterface</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生"</span> <span class="token operator">+</span> anInterface<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>Interface <span class="token class-name">anInterface</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生"</span> <span class="token operator">+</span> anInterface<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">Interface</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在觅食"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在行走"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在叫"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在飞翔"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在游泳"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Swan</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>Interface <span class="token class-name">anInterface</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"天鹅"</span> <span class="token operator">+</span> anInterface<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span>Interface <span class="token class-name">anInterface</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"天鹅"</span> <span class="token operator">+</span> anInterface<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span>Interface <span class="token class-name">anInterface</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"天鹅"</span> <span class="token operator">+</span> anInterface<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>interfaceIsolation<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfaceIsolation01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        People people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>        Swan swan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        swan<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span>        swan<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span>        swan<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>学生在说话学生在吃饭学生在跑步天鹅在觅食天鹅在飞翔天鹅在游泳</code></pre><h3 id="3-方案二"><a href="#3-方案二" class="headerlink" title="3.方案二"></a>3.方案二</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Interface02_1</span><span class="token punctuation">{</span>    String <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Interface02_2</span><span class="token punctuation">{</span>    String <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Interface02_3</span><span class="token punctuation">{</span>    String <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">People02</span> <span class="token keyword">implements</span> <span class="token class-name">Interface02_1</span><span class="token punctuation">,</span>Interface02_2<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在吃饭"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在跑步"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在说话"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>Interface02_1 anInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生"</span> <span class="token operator">+</span> anInterface<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>Interface02_2 anInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生"</span> <span class="token operator">+</span> anInterface<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span>Interface02_2 anInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生"</span> <span class="token operator">+</span> anInterface<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Animal02</span> <span class="token keyword">implements</span> <span class="token class-name">Interface02_1</span><span class="token punctuation">,</span> Interface02_3<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在觅食"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在飞翔"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"在游泳"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Swan02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>Interface02_1 anInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"天鹅"</span> <span class="token operator">+</span> anInterface<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fly</span><span class="token punctuation">(</span>Interface02_3 anInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"天鹅"</span> <span class="token operator">+</span> anInterface<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span>Interface02_3 anInterface<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"天鹅"</span> <span class="token operator">+</span> anInterface<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>interfaceIsolation<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfaceIsolation02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student02 student02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        People02 people02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">People02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student02<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>people02<span class="token punctuation">)</span><span class="token punctuation">;</span>        student02<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span>people02<span class="token punctuation">)</span><span class="token punctuation">;</span>        student02<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>people02<span class="token punctuation">)</span><span class="token punctuation">;</span>        Swan02 swan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swan02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal02 animal02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        swan<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span>animal02<span class="token punctuation">)</span><span class="token punctuation">;</span>        swan<span class="token punctuation">.</span><span class="token function">fly</span><span class="token punctuation">(</span>animal02<span class="token punctuation">)</span><span class="token punctuation">;</span>        swan<span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span>animal02<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>学生在说话学生在吃饭学生在跑步天鹅在觅食天鹅在飞翔天鹅在游泳</code></pre><h2 id="四-注意"><a href="#四-注意" class="headerlink" title="四.注意"></a>四.注意</h2><ol><li><p>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多， 使设计复杂化。所以一定要适度。</p></li><li><p>为依赖接口的类定制服务，只暴露给调用的类它需要的方法， 它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务， 才能建立最小的依赖关系。</p></li><li><p>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</p></li><li><p>运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。</p></li></ol><h2 id="五-接口隔离VS单一职责原则"><a href="#五-接口隔离VS单一职责原则" class="headerlink" title="五.接口隔离VS单一职责原则"></a>五.接口隔离VS单一职责原则</h2><p>&emsp;&emsp;接口隔离推荐接口尽量细化，同时接口中的方法尽量少。这里看起来和单一职责原则类似。那么它们有什么区别呢?</p><p>&emsp;&emsp;接口隔离和单一职责的审视的角度是不相同的</p><p>&emsp;&emsp;单一职责的要求是类和接口职责单一，注重的是职责。是业务逻辑的划分，</p><p>&emsp;&emsp;接口隔离的原则需要接口的方法尽量少。通过“尽量使用多个专门的接口”</p><p>&emsp;&emsp;总的来说前者针对单个类的,后者针对类之间的依赖耦合关系</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 设计模式七大原则 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>七大原则——里氏替换原则</title>
      <link href="/2020/08/14/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
      <url>/2020/08/14/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><h3 id="1、由来"><a href="#1、由来" class="headerlink" title="1、由来"></a>1、由来</h3><p>&emsp;&emsp;解决oop中的继承所带来的问题。</p><ol><li>承是侵入性的。只要继承，就拥有父类的所有属性和方法。</li><li>降低代码的灵活性。子类必须拥有父类的属性和方法，让子类自由的世界中多了些约束。增强了耦合性。如果子类重写了父类中已经实现的方法，则又会破坏整个继承体系</li><li>当父类的常量、变量和方法被修改时，需要考虑子类的修改，而且在缺乏规范的环境下，这种修改可能带来非常糟糕的结果——大段的代码需要重构</li></ol><p>如果要解决这些问题那么就需要遵循里氏替换原则</p><h3 id="2、里氏替换原则"><a href="#2、里氏替换原则" class="headerlink" title="2、里氏替换原则"></a>2、里氏替换原则</h3><p>&emsp;&emsp;里氏替换原则（Liskov Substitution Principle，LSP）由麻省理工学院一位姓里的女士提出来的</p><h3 id="3、里氏替换原则定义："><a href="#3、里氏替换原则定义：" class="headerlink" title="3、里氏替换原则定义："></a>3、里氏替换原则定义：</h3><p>&emsp;&emsp;如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型S是类型T的子类型.(If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T,the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T)</p><h3 id="4、简单来说，它包含以下四层含义"><a href="#4、简单来说，它包含以下四层含义" class="headerlink" title="4、简单来说，它包含以下四层含义"></a>4、简单来说，它包含以下四层含义</h3><ol><li><p>一个软件实体如果适用一个父类的话，那一定适用于其子类，所有引用父类的方法必须能透明地使用其子类的对象，子类对象能够替换父类对象，而程序逻辑不变</p></li><li><p>子类可以扩展父类的功能，但不能改变父类原有的功能。就是说，子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。子类中可以增加自己特有的方法</p></li><li><p>覆盖或实现父类的方法时输入参数可以被放大当子类的方法重载父类的方法时，方法的前置条件(即方法的输入/入参)要比父类方法的输入参数更加宽松。当子类的方法实现父类的方法时(重写/重载或实现抽象方法)，方法的后置条件(即方法的输出/返回值)要比父类更严格或相等</p></li><li><p>里氏替换原则，约束继承泛滥，开闭原则的一种体现。它加强了程序的健壮性，同时变更时也可以做到非常好的兼容性提高程序的维护性，扩展性。降低需求变更时引入的风险。</p></li></ol><h2 id="二、代码案例"><a href="#二、代码案例" class="headerlink" title="二、代码案例"></a>二、代码案例</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>liskov<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Liskov01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Add01 add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Add01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Reduce01 reduce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reduce01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//正常调用add01</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//正常调用reduce01</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//相加的类</span><span class="token keyword">class</span> <span class="token class-name">Add01</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//相减的类</span><span class="token keyword">class</span> <span class="token class-name">Reduce01</span> <span class="token keyword">extends</span> <span class="token class-name">Add01</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre><code>    30    -10</code></pre><p>&emsp;&emsp;在子类不小心重写了父类中的方法后，所得到的结果是完全不同的。且如果父类中方法的参数发生了改变程序运行会产生错误</p><p>下面将Add01和Reduce01关系分开</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>liskov<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Liskov02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Add02 add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Add02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Reduce02 reduce <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reduce02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//正常调用add01</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//正常调用reduce01</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reduce<span class="token punctuation">.</span><span class="token function">fun2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//相加的类</span><span class="token keyword">class</span> <span class="token class-name">Add02</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//相减的类</span><span class="token keyword">class</span> <span class="token class-name">Reduce02</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将原先的继承关系变成组合关系</span>    <span class="token keyword">private</span> Add02 add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Add02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>add<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre><code>    30    30</code></pre><p>&emsp;&emsp;经过这样的改动后Reduce02类和Add02类耦合性大大减低</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 设计模式七大原则 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>七大原则——依赖倒转原则</title>
      <link href="/2020/08/13/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99/"/>
      <url>/2020/08/13/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E8%BD%AC%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h2><h3 id="依赖倒转-Dependence-Inversion-Principle-DIP-原则是指："><a href="#依赖倒转-Dependence-Inversion-Principle-DIP-原则是指：" class="headerlink" title="依赖倒转(Dependence Inversion Principle, DIP)原则是指："></a>依赖倒转(Dependence Inversion Principle, DIP)原则是指：</h3><ol><li><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象</p><pre><code> 模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的</code></pre></li><li><p>抽象不应该依赖细节、细节应该依赖抽象</p><pre><code> 接口或抽象类不依赖于实现类</code></pre></li><li><p>依赖倒转原则的中心思想是面向接口编程</p><pre><code> 实现类依赖于接口或抽象类</code></pre></li></ol><h3 id="依赖倒转原则带来的好处"><a href="#依赖倒转原则带来的好处" class="headerlink" title="依赖倒转原则带来的好处"></a>依赖倒转原则带来的好处</h3><p>&emsp;&emsp;相对于细节的多变性，抽象的东西更加的稳定，以抽象为基础搭建的架构比以细节为基础搭建的架构要稳定的多，这里的抽象大多指的是接口和抽象类，而细节就是其具体的实现类。采用依赖倒置原则可以减少类间的耦合性，提高系统的稳定性，降低并行开发引起的风险，提高代码的可读性和可维护性</p><h2 id="二、案例实现"><a href="#二、案例实现" class="headerlink" title="二、案例实现"></a>二、案例实现</h2><h3 id="案例一：现有需求如下：定义一个pos机要求其能刷农业银行的银行卡"><a href="#案例一：现有需求如下：定义一个pos机要求其能刷农业银行的银行卡" class="headerlink" title="案例一：现有需求如下：定义一个pos机要求其能刷农业银行的银行卡"></a>案例一：现有需求如下：定义一个pos机要求其能刷农业银行的银行卡</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>dependenceInversion<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependenceInversion01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        POS pos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token punctuation">.</span><span class="token function">PayByCard</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ABCBank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ABCBank</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"农业银行取款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">POS</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PayByCard</span><span class="token punctuation">(</span>ABCBank ABCBank<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ABCBank<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><pre><code>    农业银行取款</code></pre><h3 id="案例二：现有增加需求，要求能刷多个银行的银行卡如工商银行，建设银行等…"><a href="#案例二：现有增加需求，要求能刷多个银行的银行卡如工商银行，建设银行等…" class="headerlink" title="案例二：现有增加需求，要求能刷多个银行的银行卡如工商银行，建设银行等…"></a>案例二：现有增加需求，要求能刷多个银行的银行卡如工商银行，建设银行等…</h3><p>&emsp;&emsp;方案一：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>dependenceInversion<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependenceInversion01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        POS pos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token punctuation">.</span><span class="token function">PayByCard</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ICBCBank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ABCBank</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"农业银行取款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ICBCBank</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"工商银行取款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CCBBank</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"建设银行取款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">POS</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PayByCard01</span><span class="token punctuation">(</span>ABCBank ABCBank<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ABCBank<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PayByCard02</span><span class="token punctuation">(</span>ICBCBank ICBCBank<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ICBCBank<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PayByCard03</span><span class="token punctuation">(</span>CCBBank CCBBank<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CCBBank<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre><code>    工商银行取款</code></pre><p>虽然简单的实现了功能但是要修改的地方太多，每次需要增加银行都需要新写一个类，同时还需要增加其对应的方法。扩展性不高，且代码重复性很高</p><p>&emsp;&emsp;方案二：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>dependenceInversion<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependenceInversion01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        POS pos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pos<span class="token punctuation">.</span><span class="token function">PayByCard</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ICBCBank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Money</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ABCBank</span> <span class="token keyword">implements</span> <span class="token class-name">Money</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"农业银行取款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ICBCBank</span> <span class="token keyword">implements</span> <span class="token class-name">Money</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"工商银行取款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">CCBBank</span> <span class="token keyword">implements</span> <span class="token class-name">Money</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"建设银行取款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">POS</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">PayByCard</span><span class="token punctuation">(</span>Money Money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Money<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre><code>    工商银行取款</code></pre><p>使用这种方式以后，如果还需要增加其他的银行的话，只需要实现对应的Money接口即可</p><h2 id="三、依赖倒转的三种传递方式"><a href="#三、依赖倒转的三种传递方式" class="headerlink" title="三、依赖倒转的三种传递方式"></a>三、依赖倒转的三种传递方式</h2><h3 id="1、接口传递"><a href="#1、接口传递" class="headerlink" title="1、接口传递"></a>1、接口传递</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>dependenceInversion<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependenceInversion02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用接口传递</span>        OpenAndClose openAndClose <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenAndClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将需要打电话的手机传入</span>        openAndClose<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IOpenAndClose</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>IPhone phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IPhone</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MiPhone</span> <span class="token keyword">implements</span> <span class="token class-name">IPhone</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用小米手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OpenAndClose</span> <span class="token keyword">implements</span> <span class="token class-name">IOpenAndClose</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span>IPhone phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre><code>    使用小米手机打电话</code></pre><h3 id="2、构造方法传递"><a href="#2、构造方法传递" class="headerlink" title="2、构造方法传递"></a>2、构造方法传递</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>dependenceInversion<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependenceInversion02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//通过构造方法传递    将需要打电话的手机传递到有参构造方法中</span>        OpenAndClose openAndClose <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenAndClose</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HUAWEIPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        openAndClose<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IOpenAndClose</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IPhone</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HUAWEIPhone</span> <span class="token keyword">implements</span> <span class="token class-name">IPhone</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用华为手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OpenAndClose</span> <span class="token keyword">implements</span> <span class="token class-name">IOpenAndClose</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> IPhone phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OpenAndClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">OpenAndClose</span><span class="token punctuation">(</span>IPhone phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre><code>    使用华为手机打电话</code></pre><h3 id="3、setter方法传递"><a href="#3、setter方法传递" class="headerlink" title="3、setter方法传递"></a>3、setter方法传递</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>dependenceInversion<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependenceInversion02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用set方法传递</span>        OpenAndClose openAndClose <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OpenAndClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将打电话的手机传入</span>        openAndClose<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OPPOPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//打开手机打电话</span>        openAndClose<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IOpenAndClose</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">IPhone</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OPPOPhone</span> <span class="token keyword">implements</span> <span class="token class-name">IPhone</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用OPPO手机打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">OpenAndClose</span> <span class="token keyword">implements</span> <span class="token class-name">IOpenAndClose</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> IPhone phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPhone</span><span class="token punctuation">(</span>IPhone phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果</p><pre><code>    使用OPPO手机打电话</code></pre><h2 id="四、注意事项"><a href="#四、注意事项" class="headerlink" title="四、注意事项"></a>四、注意事项</h2><ol><li>低模块尽量有抽象类或者接口，也可以两种都有</li><li>变量的声明类型尽量用抽象类和接口，可以在变量引用和实际对象中间产生一个缓冲层，便于优化和扩展</li><li>继承的时候遵循里氏替换原则</li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 设计模式七大原则 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>七大原则——单一职责原则</title>
      <link href="/2020/08/13/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
      <url>/2020/08/13/%E4%B8%83%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是单一职责原则"><a href="#一、什么是单一职责原则" class="headerlink" title="一、什么是单一职责原则"></a>一、什么是单一职责原则</h2><p>&emsp;&emsp;对于类来说，即一个类应该只负责其对应的一个职责。怎样理解？先来看一个问题</p><p style="font-weight: 600;">未使用单一职责原则可能出现的问题</p><p>&emsp;&emsp;例如有一个类T负责两个不同的职责：职责P1和职责P2。当因为职责P1的需求发生改变而需要修改类T的时候，有可能会导致原本运行正常的职责P2功能发生故障。</p><p style="font-weight: 600;">使用单一职责原则后</p><p>&emsp;&emsp;遵循单一职责原则，分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1的时候，不会使职责P2发生故障风险。同理，当修改T2的时候，也不会使职责P1发生故障风险。</p><p style="color: red">&emsp;&emsp;注意：这个一项职责不是说一个类中只能有一个方法，而是其类所对应的一些行为，比如订单类会有订单的行为，而客户类中只有客户的一些行为</p><h2 id="二、使用单一职责的案例"><a href="#二、使用单一职责的案例" class="headerlink" title="二、使用单一职责的案例"></a>二、使用单一职责的案例</h2><h3 id="1、初始代码"><a href="#1、初始代码" class="headerlink" title="1、初始代码"></a>1、初始代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleResponsibility<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleResponsibility01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Teacher<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token string">"数学老师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Teacher<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token string">"语文老师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Teacher<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token string">"体育老师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span>String teacherName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacherName <span class="token operator">+</span> <span class="token string">"在教数学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h4><pre><code>数学老师在教数学语文老师在教数学体育老师在教数学</code></pre><h3 id="2、改动后"><a href="#2、改动后" class="headerlink" title="2、改动后:"></a>2、改动后:</h3><h4 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleResponsibility<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleResponsibility02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TeacherMath<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token string">"数学老师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TeacherChinese<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token string">"语文老师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TeacherEnglish<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token string">"英语老师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TeacherMath</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span>String teacherName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacherName <span class="token operator">+</span> <span class="token string">"在教数学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TeacherChinese</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span>String teacherName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacherName <span class="token operator">+</span> <span class="token string">"在教语文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TeacherEnglish</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span>String teacherName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacherName <span class="token operator">+</span> <span class="token string">"在教英语"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="运行结果：-1"><a href="#运行结果：-1" class="headerlink" title="运行结果："></a>运行结果：</h4><pre><code>数学老师在教数学语文老师在教语文英语老师在教英语</code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>&emsp;&emsp;虽然遵循了单一职责原则但是改动地方太多，工程量大，成本高</p><h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>principle<span class="token punctuation">.</span>singleResponsibility<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleResponsibility03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Teach<span class="token punctuation">.</span><span class="token function">ChineseTeacher</span><span class="token punctuation">(</span><span class="token string">"语文老师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Teach<span class="token punctuation">.</span><span class="token function">MathTeacher</span><span class="token punctuation">(</span><span class="token string">"数学老师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Teach<span class="token punctuation">.</span><span class="token function">EnglishTeacher</span><span class="token punctuation">(</span><span class="token string">"英语老师"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Teach</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">MathTeacher</span><span class="token punctuation">(</span>String teacherName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacherName <span class="token operator">+</span> <span class="token string">"在教数学"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ChineseTeacher</span><span class="token punctuation">(</span>String teacherName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacherName <span class="token operator">+</span> <span class="token string">"在教语文"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">EnglishTeacher</span><span class="token punctuation">(</span>String teacherName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacherName <span class="token operator">+</span> <span class="token string">"在教英语"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="运行结果：-2"><a href="#运行结果：-2" class="headerlink" title="运行结果："></a>运行结果：</h4><pre><code>数学老师在教数学语文老师在教语文英语老师在教英语</code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>&emsp;&emsp;这种改动没有对原来的类做很大修改，只是增加了一些方法<br>虽然没有在类这个级别上遵循单一职责原则，但是做到了方法级别的单一职责原则</p><h2 id="三、使用单一职责原则的好处"><a href="#三、使用单一职责原则的好处" class="headerlink" title="三、使用单一职责原则的好处"></a>三、使用单一职责原则的好处</h2><ol><li>降低类的复杂度，一个类只负责对应的职责</li><li>提高类的可读性</li><li>降低需求改动所带来的高成本维护</li></ol><h2 id="四、什么时候使用单一职责原则"><a href="#四、什么时候使用单一职责原则" class="headerlink" title="四、什么时候使用单一职责原则"></a>四、什么时候使用单一职责原则</h2><p>通常情况下：<span style="color: red">我们都需要遵守单一职责原则</span></p><p style="font-weight: 600;">只有逻辑足够简单，才可以在代码级别违反单一原则。只有类中的方法数量足够少，才可以在方法级别保持单一原则</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 设计模式七大原则 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式——开篇</title>
      <link href="/2020/08/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/08/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是设计模式"><a href="#一、什么是设计模式" class="headerlink" title="一、什么是设计模式"></a>一、什么是设计模式</h2><h3 id="先看看百度词条的解释"><a href="#先看看百度词条的解释" class="headerlink" title="先看看百度词条的解释"></a>先看看百度词条的解释</h3><p>&emsp;&emsp;软件设计模式（Design pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性、程序的重用性。</p><h3 id="以下是个人理解"><a href="#以下是个人理解" class="headerlink" title="以下是个人理解"></a>以下是个人理解</h3><p>&emsp;&emsp;设计模式可以帮助我们在不同的场景下更加合理，更加快捷的构建优秀（可读性，可重用，可扩展）的代码，并且能够很巧妙的解决代码中很多问题，例如我们所熟知的mvc模式(Model-View-Controller)其实也运用了一些设计模式——Observer (观察者模式), Composite(组合模式)和Strategy(策略模式)</p><h2 id="二、使用设计模式的好处"><a href="#二、使用设计模式的好处" class="headerlink" title="二、使用设计模式的好处"></a>二、使用设计模式的好处</h2><ol><li><p style="font-weight: 600;">提升代码可用性</p> &emsp;&emsp;相同功能的代码不需要多次编写</li><li><p style="font-weight: 600;">增加代码可读性</p> &emsp;&emsp;编程规范型，便于其他程序员阅读和理解</li><li><p style="font-weight: 600;">实现代码可扩展性</p> &emsp;&emsp;当需要增加新的功能时非常的方便</li><li><p style="font-weight: 600;">保证程序可靠性</p> &emsp;&emsp;增加新的功能后，对原有的功能没有影响</li><li><p style="font-weight: 600;">使程序呈现高内聚、低耦合的特性</p></li></ol><h2 id="三、设计模式的诞生"><a href="#三、设计模式的诞生" class="headerlink" title="三、设计模式的诞生"></a>三、设计模式的诞生</h2><p>&emsp;&emsp;设计模式这一概念，起源于建筑领域，是由Christopher Alexander(克里斯托佛·亚历山大)及其团队，长时间通过对建筑行业的调查研究，总结了建筑行业可重复复用的解决方案，并记录在《建筑的永恒之道》中。在书中，对模式的定义是：每个模式都描述了一个在环境中不断出现的问题，然后描述了该问题的解决方案核心，通过这种方式，可以无数次地重用那些已有的成功的解决方案，无须再重复相同的工作。简单表述就是：模式是在特定环境下解决某类重复出现问题的一套成功或有效的解决方案。</p><p>&emsp;&emsp;从模式Pattern的定义中可以看到，每个模式是在特定的环境下才有效，学习模式，除了了解模式本身的，还得了解这个模式在什么环境下才能使用。</p><p>&emsp;&emsp;在1994年，四人组（Gang of Four），归纳并发表了23中在软件开发中使用频率较高的设计模式，把模式的概念引入软件工程中，即软件模式（Software Patterns）。当然，模式的概念不止存在于设计模式中，还包括了架构模式、分析模式、过程模式等，在软件周期的每个阶段，都有相应被总结的模式。</p><h2 id="四、设计模式的基本要素"><a href="#四、设计模式的基本要素" class="headerlink" title="四、设计模式的基本要素"></a>四、设计模式的基本要素</h2><ol><li>模式名称：一个助记名，它用一两个词来描述模式的问题、解决方案和效果。</li><li>问题：描述了应该在何时使用模式。</li><li>解决方案：描述了设计的组成成分，它们之间的相互关系及各自的职责和协作方式。</li><li>效果：描述了模式应用的效果及使用模式应权衡的问题。</li></ol><h2 id="五、七大设计原则"><a href="#五、七大设计原则" class="headerlink" title="五、七大设计原则"></a>五、七大设计原则</h2><p>&emsp;&emsp;设计模式原则，其实就是程序员在编程时，应当遵守的原则，也是各种设计模式的基础（即：设计模式为什么这样设计的依据）</p><ol><li>单一职责原则</li><li>接口隔离原则</li><li>依赖倒转（倒置）原则</li><li>里氏替换原则</li><li>开闭原则</li><li>迪米特法则</li><li>合成复用原则</li></ol><h2 id="六、设计原则的核心思想"><a href="#六、设计原则的核心思想" class="headerlink" title="六、设计原则的核心思想"></a>六、设计原则的核心思想</h2><ol><li>找出程序中的变化的部分，把他们独立出来，不能将他们和稳定的代码混在一起</li><li>针对接口编程，而不是针对实现编程</li><li>为了交互对象之间的松耦合设计而努力</li></ol><h2 id="七、23种常用设计模式"><a href="#七、23种常用设计模式" class="headerlink" title="七、23种常用设计模式"></a>七、23种常用设计模式</h2><p><img src="https://s1.ax1x.com/2020/08/16/dEWrFS.png" alt="dEWrFS.png" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器小甜饼-cookie</title>
      <link href="/2020/08/09/cookie/"/>
      <url>/2020/08/09/cookie/</url>
      
        <content type="html"><![CDATA[<h3 id="一、什么是cookie-储存在用户本地终端上的数据"><a href="#一、什么是cookie-储存在用户本地终端上的数据" class="headerlink" title="一、什么是cookie(储存在用户本地终端上的数据)"></a>一、什么是cookie(储存在用户本地终端上的数据)</h3><p>&emsp;&emsp;Cookie，有时也用其复数形式 Cookies。类型为“小型文本文件”，是某些网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由用户客户端计算机暂时或永久保存的信息</p><h3 id="二、cookie的使用-java版"><a href="#二、cookie的使用-java版" class="headerlink" title="二、cookie的使用(java版)"></a>二、cookie的使用(java版)</h3><h4 id="1、cookie的创建"><a href="#1、cookie的创建" class="headerlink" title="1、cookie的创建"></a>1、cookie的创建</h4><p>&emsp;&emsp;（1）不设置有效期(临时存储):存储在浏览器的运行内存中,浏览器关闭则cookie失效</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取请求对象</span>HttpServletRequest request <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取响应对象</span>HttpServletResponse response <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取前端的用户名和密码</span>String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String pwd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将用户名和密码存放到cookie中</span>Cookie cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>Cookie cookie2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//响应到浏览器</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>    登陆时</code></pre><p><img src="https://s1.ax1x.com/2020/08/09/aTLUFU.png" alt="aTLUFU.png" loading="lazy"></p><pre><code>    登陆后</code></pre><p><img src="https://s1.ax1x.com/2020/08/09/aTLDyR.png" alt="aTLDyR.png" loading="lazy"></p><p style="color:red;">注意以下几点</p><p style="color:red;">1.一个cookie对象只能存储一条数据,多条数据需要新建多个cookie对象</p><p style="color:red;">2.如果没有设置cookie的有效期的话，在浏览器关闭的同时cookie也随之消失</p>&emsp;&emsp;（2）设置有效期(定时存储):存储在客户端的硬盘中,在有效期符合路径要求的请求都会携带该信息<pre class=" language-java"><code class="language-java">HttpServletRequest request <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HttpServletResponse response <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String pwd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Cookie cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>Cookie cookie2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给用户名设置有效期（注意值是义秒为单位的）</span>cookie1<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>    登陆后</code></pre><p><a href="https://imgchr.com/i/aTjWfU" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/09/aTjWfU.png" alt="aTjWfU.png" loading="lazy"></a></p><pre><code>    关闭浏览器重新打开</code></pre><p><img src="https://s1.ax1x.com/2020/08/09/aTjTmR.png" alt="aTjTmR.png" loading="lazy"></p><p>&emsp;&emsp;（3）设置有效路径</p><pre class=" language-java"><code class="language-java">HttpServletRequest request <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HttpServletResponse response <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String pwd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Cookie cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>Cookie cookie2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置有效路径</span>cookie1<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/user/cookie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给用户名设置有效期（注意值是义秒为单位的）</span>cookie1<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>    在/user/cookie/路径下</code></pre><p><img src="https://s1.ax1x.com/2020/08/09/aTv44f.png" alt="aTv44f.png" loading="lazy"><br><img src="https://s1.ax1x.com/2020/08/09/aTvjU0.png" alt="aTvjU0.png" loading="lazy"></p><pre><code>    不在/user/cookie/路径下</code></pre><p><img src="https://s1.ax1x.com/2020/08/09/aTvzCT.png" alt="aTvzCT.png" loading="lazy"><br><img src="https://s1.ax1x.com/2020/08/09/aTx9v4.png" alt="aTx9v4.png" loading="lazy"></p><h4 id="2、cookie的获取"><a href="#2、cookie的获取" class="headerlink" title="2、cookie的获取"></a>2、cookie的获取</h4><pre class=" language-java"><code class="language-java">HttpServletRequest request <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取所有的cookie</span>Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取的cookie不为空</span><span class="token keyword">if</span><span class="token punctuation">(</span>cookies <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历所有的cookie</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//输出对应的key和value</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key : "</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  value : "</span> <span class="token operator">+</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre><code>    前端cookie的值</code></pre><p><img src="https://s1.ax1x.com/2020/08/09/aTxXsH.png" alt="aTxXsH.png" loading="lazy"></p><pre><code>    后端cookie的值</code></pre><p><img src="https://s1.ax1x.com/2020/08/09/aTzFSS.png" alt="aTzFSS.png" loading="lazy"></p><h3 id="三、cookie使用案例-五天免密登陆"><a href="#三、cookie使用案例-五天免密登陆" class="headerlink" title="三、cookie使用案例(五天免密登陆)"></a>三、cookie使用案例(五天免密登陆)</h3><pre class=" language-java"><code class="language-java">HttpServletRequest request <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Cookie<span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//cookie中的信息不为空</span><span class="token keyword">if</span><span class="token punctuation">(</span>cookies <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//遍历cookie</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Cookie cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//执行对应的数据库操作</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//跳转到首页</span>            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回登录页</span>    <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返回登录页</span>    <span class="token keyword">return</span> <span class="token string">"login"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取请求对象</span>HttpServletRequest request <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取响应对象</span>HttpServletResponse response <span class="token operator">=</span> ServletActionContext<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取前端的用户名和密码</span>String name <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String pwd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将用户名和密码存放到cookie中</span>Cookie cookie1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>Cookie cookie2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断用户是否选择了五天内自动登陆</span><span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"autoLogin"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cookie1<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie1<span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//响应到浏览器</span><span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 浏览器小知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda表达式-2</title>
      <link href="/2020/06/18/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F-2/"/>
      <url>/2020/06/18/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F-2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、循环遍历集合"><a href="#一、循环遍历集合" class="headerlink" title="一、循环遍历集合"></a>一、循环遍历集合</h2><h3 id="1、遍历排序list集合"><a href="#1、遍历排序list集合" class="headerlink" title="1、遍历排序list集合"></a>1、遍历排序list集合</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>lambda<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Person<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ks"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"as"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"hs"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ds"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//利用list的sort对person对象的age进行排序</span>        list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历集合</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>compareTo<span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>integer <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、遍历排序set集合"><a href="#2、遍历排序set集合" class="headerlink" title="2、遍历排序set集合"></a>2、遍历排序set集合</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>lambda<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>TreeSet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>Person<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ls"</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ks"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"as"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"hs"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ds"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>person <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> person<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、removeif的使用"><a href="#3、removeif的使用" class="headerlink" title="3、removeif的使用"></a>3、removeif的使用</h3><h2 id="二、线程实例化"><a href="#二、线程实例化" class="headerlink" title="二、线程实例化"></a>二、线程实例化</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>lambda<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用lambda实现runnable接口实例化线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="三、系统内置函数接口"><a href="#三、系统内置函数接口" class="headerlink" title="三、系统内置函数接口"></a>三、系统内置函数接口</h2><p>这些接口都位于java.util.function包下</p><table border="1" width="80%" align="center" cellpadding="0" cellspacing="0"><tr align="center">    <td width=120px>函数接口名</td>    <td>参数</td>    <td>返回值类型</td>    <td>是否有继承</td>    <td width=300px>扩展接口</td></tr><tbody align="center"><tr>    <td>Predicate（常用）</td>    <td>T</td>    <td>boolean</td>    <td>无</td>    <td>IntPredicate 参数int返回值 boolean<br>        longPredicate 参数long返回值 boolean<br>        DoublePredicate 参数double返回值 boolean    </td></tr><tr>    <td>Consumer（常用）</td>    <td>T</td>    <td>void</td>    <td>无</td>    <td>IntConsumer 参数int返回值 void<br>        LongConsumer 参数long返回值 void<br>        DoubleConsumer 参数double返回值 void    </td></tr><tr>    <td>function（常用）</td>    <td>T</td>    <td>R</td>    <td>无</td>    <td>IntFunction 参数int返回值 R<br>        LongFunction 参数long返回值 R<br>        DoubleFunction 参数double返回值 R<br>        IntToLangFunction 参数int 返回值 long<br>        IntToDoubleFunction 参数int 返回值 double<br>        LongToIntFunction 参数long 返回值 int<br>        LongToDouble 参数long 返回值 double<br>        DoubleToIntFunction 参数double 返回值 int<br>        DoubleToLangFunction 参数double 返回值 long<br>    </td></tr><tr>    <td>Supplier（常用）</td>    <td>无</td>    <td>T</td>    <td>无</td>    <td>        UnaryOperator<T> 参数T 返回值T        BinaryOperator<T> 参数T,U 返回值T        BiFunction<T, U, R> 参数T,U 返回值R        BiPredicate<T,U> 参数T,U 返回值boolean        BiConsumer<T,U> 参数T,U 返回值void    </td></tr><tr>    <td>UnaryOperator</td>    <td>T</td>    <td>T</td>    <td>Function&lt;T&gt;, &lt;T></td>    <td>......</td></tr><tr>    <td>BiFunction</td>    <td>T,U</td>    <td>R</td>    <td>无</td>    <td>......</td></tr><tr>    <td>BinaryOperator</td>    <td>Comparator&lt;? super &lt;T&gt; comparator</td>    <td>T</td>    <td>extends BiFunction&lt;T&gt;,&lt;T&gt;, &lt;T></td>    <td>......</td></tr><tr>    <td>BiPredicate</td>    <td>T,U</td>    <td>boolead</td>    <td>无</td>    <td>......</td></tr><tr>    <td>BiConsumer</td>    <td>T,U</td>    <td>void</td>    <td>无</td>    <td>......</td></tr></tbody></table><h2 id="四、闭包函数"><a href="#四、闭包函数" class="headerlink" title="四、闭包函数"></a>四、闭包函数</h2><h3 id="1、闭包示例一："><a href="#1、闭包示例一：" class="headerlink" title="1、闭包示例一："></a>1、闭包示例一：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>lambda<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Supplier<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 由于使用闭包函数，在getNum方法执行完了以后，局部变量并没有被销毁         * 而且后面Supplier&lt;Integer>的get方法还对num进行了引用         * 由此可知使用闭包函数会提升局部变量的生命周期         */</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Supplier<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//局部变量 ， 方法执行完销毁</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为返回值是Supplier&lt;Integer>，而Supplier&lt;Integer>的返回值是Integer，所以直接返回num</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、闭包示例二："><a href="#2、闭包示例二：" class="headerlink" title="2、闭包示例二："></a>2、闭包示例二：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>lambda<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Consumer<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Supplier<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//正常输出</span>        Consumer<span class="token operator">&lt;</span>Integer<span class="token operator">></span> consumer01 <span class="token operator">=</span> T<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer01<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 直接输出局部变量的值         * 如果使用的是这种方式,应该将局部变量设置为常量         * 因为使用lambda表达式在闭包中引用的变量都是常量         * 如果我们不加final修饰使其变为常量的话，编译器会默认的加上final修饰         * 此时我们是无法对这个局部变量进行修改的         */</span>        Consumer<span class="token operator">&lt;</span>Integer<span class="token operator">></span> consumer02 <span class="token operator">=</span> T<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为输出的是一个局部变量，所以无论我们传的值是多少，输出的永远是局部变量</span>        consumer02<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java8新特性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda表达式-1</title>
      <link href="/2020/06/18/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F-1/"/>
      <url>/2020/06/18/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F-1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、lambda表达式简介"><a href="#一、lambda表达式简介" class="headerlink" title="一、lambda表达式简介"></a>一、lambda表达式简介</h2><h3 id="1、什么是lambda表达式"><a href="#1、什么是lambda表达式" class="headerlink" title="1、什么是lambda表达式"></a>1、什么是lambda表达式</h3><p>&emsp;&emsp;lambda表达式是JDK1.8添加的一个新特性，lambda把一个匿名函数进行了简化操做， </p><h3 id="2、为什么需要lambda表达式"><a href="#2、为什么需要lambda表达式" class="headerlink" title="2、为什么需要lambda表达式"></a>2、为什么需要lambda表达式</h3><p>&emsp;&emsp;lambda表达式可以将匿名函数进行非常简洁的实现</p><p>例如：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>lambda<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo01</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用接口实现类</span>    Comparetor com01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImpComparetor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用匿名内部类</span>    Comparetor com02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImpComparetor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用lambda表达式</span>    Comparetor com03 <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在方法中只有一句时可以省略大括号</span>    Comparetor com04 <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ImpComparetor</span> <span class="token keyword">implements</span> <span class="token class-name">Comparetor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Comparetor</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3、lambda表达式对接口的要求"><a href="#3、lambda表达式对接口的要求" class="headerlink" title="3、lambda表达式对接口的要求"></a>3、lambda表达式对接口的要求</h3><p>&emsp;&emsp;虽然有些时候可以使用lambda表达式来对接口进行简单的实现，但并不是所有的接口都能用lambda表达式来实现，如果接口中所定义的方法超过了一个，则不能使用lambda表达式</p><p>&emsp;&emsp;Java1.8对接口加了一个新的特征：default——在接口中定义非抽象方法。通俗点讲default就是给接口赋予了原来抽象类的能力，实现类可以像使用抽象类的方法一样，直接使用接口里的方法。</p><p>&emsp;&emsp;@FunctionalInterface:修改函数式接口，保证接口中的抽象方法只有一个</p><h2 id="二、lambda的基本语法"><a href="#二、lambda的基本语法" class="headerlink" title="二、lambda的基本语法"></a>二、lambda的基本语法</h2><p>接口代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>lambda<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">Test01</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">Test02</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">Test03</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">Test04</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">Test05</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> String str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre><code>lambda表达式的基础语法，可以将lambda表达式看做是一个匿名函数参数列表() 方法体{}():用来描述参数列表{}:用来描述方法体-&gt;:lambda运算符，读作goes to</code></pre><h3 id="1、test01"><a href="#1、test01" class="headerlink" title="1、test01:"></a>1、test01:</h3><ol><li>无参，只需要用()表示</li><li>无返回值 方法体内只有一条语句，可以省略大括号<pre class=" language-java"><code class="language-java">Test01 test01 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是test01接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test01<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2、test02"><a href="#2、test02" class="headerlink" title="2、test02:"></a>2、test02:</h3></li><li>只有一个参数：可以省略括号，还可以省略参数类型，因为接口已经定义了参数类型和数量</li><li>无返回值 方法体内只有一条语句，可以省略大括号<pre class=" language-java"><code class="language-java">Test02 test02 <span class="token operator">=</span> name <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"调用了test02接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test02<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3、test03"><a href="#3、test03" class="headerlink" title="3、test03:"></a>3、test03:</h3></li><li>有两个参数（不可以省略括号），</li><li>无返回值 方法体内只有一条语句，可以省略大括号</li><li><span style="color:red;">注意:如果要省略参数类型就将所有的参数类型都省略，不能只省略一个参数类型</span><pre class=" language-java"><code class="language-java">Test03 test03 <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>test03<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token string">"调用了test03接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4、test04"><a href="#4、test04" class="headerlink" title="4、test04:"></a>4、test04:</h3></li><li>只有有一个参数（可以省略括号），</li><li>有返回值 方法体内只有一条语句，可以省略大括号</li><li><span style="color:red;">注意：如果这一条语句是返回值，那么在省略大括之前必需将return也去掉</span><pre class=" language-java"><code class="language-java">Test04 test04 <span class="token operator">=</span> name <span class="token operator">-</span><span class="token operator">></span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>test04<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5、test05"><a href="#5、test05" class="headerlink" title="5、test05:"></a>5、test05:</h3></li><li>有两个参数（不可以省略括号），</li><li>有返回值 方法体内有两条语句，不可以省略大括号<pre class=" language-java"><code class="language-java">Test05 test05 <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>test05<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"调用了test05接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="三、lambda语法进阶"><a href="#三、lambda语法进阶" class="headerlink" title="三、lambda语法进阶"></a>三、lambda语法进阶</h2><h3 id="1、方法的引用"><a href="#1、方法的引用" class="headerlink" title="1、方法的引用"></a>1、方法的引用</h3></li><li>概述：可以快速的将一个lambda表达式对接口的实现改成一个已经实现此接口的方法</li><li>代码格式：方法隶属名 :: 方法名</li></ol><p>代码示例：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>lambda<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//写法一</span>        Test test01 <span class="token operator">=</span> num <span class="token operator">-</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test01<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//写法二</span>        Test test02 <span class="token operator">=</span> LambdaDemo01<span class="token operator">:</span><span class="token operator">:</span>test<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test02<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            num <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">interface</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><span style="color:red;">注意:</span></p><ol><li>方法中的参数类型和参数个数必须和接口中定义的方法一致</li><li>返回值的类型也必须和接口中方法所定义的返回值类型一致</li></ol><h3 id="2、构造方法的引用"><a href="#2、构造方法的引用" class="headerlink" title="2、构造方法的引用"></a>2、构造方法的引用</h3><p>person类代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是person类的无参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是person类的有参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试代码:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>lambda<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>Person<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaDemo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//原始写法</span>        ImpPerson01 impPerson01 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        impPerson01<span class="token punctuation">.</span><span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ImpPerson02 impPerson02 <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        impPerson02<span class="token punctuation">.</span><span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过方法调用</span>        ImpPerson01 impPerson03 <span class="token operator">=</span> Person<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>        impPerson03<span class="token punctuation">.</span><span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ImpPerson02 impPerson04 <span class="token operator">=</span> Person<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">;</span>        impPerson04<span class="token punctuation">.</span><span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">ImpPerson01</span><span class="token punctuation">{</span>    Person <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">ImpPerson02</span><span class="token punctuation">{</span>    Person <span class="token function">getPerson</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java8新特性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 新特性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程-1(基础)</title>
      <link href="/2020/06/15/java%E5%A4%9A%E7%BA%BF%E7%A8%8B-1/"/>
      <url>/2020/06/15/java%E5%A4%9A%E7%BA%BF%E7%A8%8B-1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、进程与线程的概述"><a href="#一、进程与线程的概述" class="headerlink" title="一、进程与线程的概述"></a>一、进程与线程的概述</h2><h3 id="1、进程"><a href="#1、进程" class="headerlink" title="1、进程"></a>1、进程</h3><p>&emsp;&emsp;进程是程序的一次执行过程，是一个动态概念，是程序在执行过程中分配和管理资源的基本单位，每一个进程都有一个自己的地址空间，至少有 5 种基本状态，它们是：初始态，执行态，等待状态，就绪状态，终止状态。通俗来讲，可以把一个程序当作是一个进程</p><h3 id="2、线程"><a href="#2、线程" class="headerlink" title="2、线程"></a>2、线程</h3><p>&emsp;&emsp;线程是CPU调度和分派的基本单位，线程实际上是在进程的基础上进一步划分的，一个进程启动后，里面会产生若干个线程，每个线程都共享这个进程的内存空间，线程之间可以互相切换，并发执行，一个进程至少要有一个线程</p><h3 id="3、进程和线程的区别"><a href="#3、进程和线程的区别" class="headerlink" title="3、进程和线程的区别"></a>3、进程和线程的区别</h3><p>&emsp;&emsp;<span style="color:red;">根本区别：</span>进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位<br><br>&emsp;&emsp;<span style="color:#006799;">开销方面：</span>每个进程都有独立的代码和数据空间（程序上下文），进程之间切换开销大；线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小<br><br>&emsp;&emsp;<span style="color:#006799;">所处环境：</span>在操作系统中能同时运行多个进程（程序）；而在同一个进程（程序）中有多个线程同时执行（通过CPU调度，在每个时间片中只有一个线程执行）<br></p><p>&emsp;&emsp;<span style="color:#006799;">内存分配：</span>系统在运行的时候会为每个进程分配不同的内存空间；而对线程而言，除了CPU外，系统不会为线程分配内存（线程所使用的资源来自其所属进程的资源），线程组之间只能共享资源<br></p><p>&emsp;&emsp;<span style="color:#006799;">包含关系：</span>没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程<br></p><pre><code>通俗理解：</code></pre><p>&emsp;&emsp;<span style="color:#006799;">线程：</span>车间内的一条流水线 = 一个线程；<br><br>&emsp;&emsp;<span style="color:#006799;">进程与线程：</span>一个进程可以包括多个线程。一个车间可以有多条流水线</p><h3 id="4、单核CPU和多核CPU的区别"><a href="#4、单核CPU和多核CPU的区别" class="headerlink" title="4、单核CPU和多核CPU的区别"></a>4、单核CPU和多核CPU的区别</h3><p>&emsp;&emsp;单核CPU：一台单核处理器计算机 = 一个车间；<br><br>&emsp;&emsp;多核CPU：一台多核处理器计算机 = 一座工厂；</p><h3 id="5、单进程和多进程的区别"><a href="#5、单进程和多进程的区别" class="headerlink" title="5、单进程和多进程的区别"></a>5、单进程和多进程的区别</h3><p>&emsp;&emsp;单进程：一个车间 = 一个进程（即正在运行的一个程序）<br><br>&emsp;&emsp;多进程：一座工厂可以同时运行多个车间<br><br>&emsp;&emsp;CPU和进程：单CPU只能同时运行单个进程，多CPU可以同时运行多个进程。</p><h2 id="二、实现线程的方式"><a href="#二、实现线程的方式" class="headerlink" title="二、实现线程的方式"></a>二、实现线程的方式</h2><h3 id="1、继承Thread类重写run方法"><a href="#1、继承Thread类重写run方法" class="headerlink" title="1、继承Thread类重写run方法"></a>1、继承Thread类重写run方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>thread<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExtThread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过start方法开启线程</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//静态内部类：实现线程类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ExtThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"继承thread的线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2、实现runnable接口实现run方法"><a href="#2、实现runnable接口实现run方法" class="headerlink" title="2、实现runnable接口实现run方法"></a>2、实现runnable接口实现run方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>thread<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//必须通过thread类的start方法调用开启线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImpThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//静态内部类：实现Runnable接口</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ImpThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现Runnable的接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、实现Callable接口通过FutureTask包装器来创建Thread线程"><a href="#3、实现Callable接口通过FutureTask包装器来创建Thread线程" class="headerlink" title="3、实现Callable接口通过FutureTask包装器来创建Thread线程"></a>3、实现Callable接口通过FutureTask包装器来创建Thread线程</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>thread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Callable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Callable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> call <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImpThread</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//由Callable&lt;Integer>创建一个FutureTask&lt;Integer>对象：</span>        FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span>Integer<span class="token operator">></span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 注释：FutureTask&lt;Integer>是一个包装器，         * 它通过接受Callable&lt;Integer>来创建，         * 它同时实现了Future和Runnable接口。         * 由FutureTask&lt;Integer>创建一个Thread对象：         */</span>        <span class="token comment" spellcheck="true">//通过Thread的构造方法再调用start方法，启动线程</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ImpThread</span><span class="token operator">&lt;</span>v<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>v<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> v <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实现callable接口实现call方法创建线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、使用ExecutorService、Callable、Future实现有返回结果的线程"><a href="#4、使用ExecutorService、Callable、Future实现有返回结果的线程" class="headerlink" title="4、使用ExecutorService、Callable、Future实现有返回结果的线程"></a>4、使用ExecutorService、Callable、Future实现有返回结果的线程</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>thread<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread01</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> POOL_NUM <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//线程池数量</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建一个固定大小的线程池</span>        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>POOL_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//</span>            Runnable run <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"通过线程池方式创建的线程："</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 在未来某个时间执行给定的命令</span>            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//关闭线程池</span>        executorService<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 等待子线程结束，再继续执行下面的代码</span>        executorService<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>DAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"all thread complete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、四种方式的优缺点"><a href="#4、四种方式的优缺点" class="headerlink" title="4、四种方式的优缺点"></a>4、四种方式的优缺点</h3><p><span style="color:#5ff;">创建线程方式一：继承Thread类。</span><br><br>&emsp;&emsp;好处：写法简单，调用简单<br><br>&emsp;&emsp;坏处：Java属于单继承，继承了thread类以后可扩展性将变差<br></p><p><span style="color:#5ff;">创建线程方式二：实现Runnable接口。</span><br><br>&emsp;&emsp;好处：将线程的任务从线程的子类中分离出来，进行了单独的封装，按照面向对象的思想将任务封装成对象，避免了java单继承的局限性。推荐使用<br></p><p><span style="color:#5ff;">创建线程方式三：实现Callable接口。</span><br><br>与使用Runnable相比， Callable功能更强大些</p><ol><li>相比run()方法，可以有返回值</li><li>方法可以抛出异常 </li><li>支持泛型的返回值 </li><li>需要借助FutureTask类，比如获取返回结果单<br></li></ol><p>Future接口</p><ol><li>可以对具体Runnable、Callable任务的执行结果进行取消、查询是<br>否完成、获取结果等。</li><li>FutrueTask是Futrue接口的唯一的实现类</li><li>FutureTask 同时实现了Runnable, Future接口。它既可以作为 Runnable被线程执行，又可以作为Future得到Callable的返回值</li></ol><p><span style="color:#5ff;">创建线程方式四：使用线程池。</span><br><br>&emsp;&emsp;背景：经常创建和销毁、使用量特别大的资源，比如并发情况下的线程， 对性能影响很大。<br><br><br>&emsp;&emsp;思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用完 放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交 通工具。<br></p><p>&emsp;&emsp;好处：</p><ol><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理<br>　　corePoolSize：核心池的大小<br>　　maximumPoolSize：最大线程数<br>　　keepAliveTime：线程没有任务时最多保持多长时间后会终止</li></ol><h2 id="三、常用方法介绍"><a href="#三、常用方法介绍" class="headerlink" title="三、常用方法介绍"></a>三、常用方法介绍</h2>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射示例</title>
      <link href="/2020/05/28/java%E5%8F%8D%E5%B0%84%E7%A4%BA%E4%BE%8B/"/>
      <url>/2020/05/28/java%E5%8F%8D%E5%B0%84%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="一、通过注解创建数据表"><a href="#一、通过注解创建数据表" class="headerlink" title="一、通过注解创建数据表"></a>一、通过注解创建数据表</h2><h3 id="1、自定义创表注解"><a href="#1、自定义创表注解" class="headerlink" title="1、自定义创表注解"></a>1、自定义创表注解</h3><pre><code>自定义创数据表的注解</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>myAnnotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyTable</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre><code>自定义设置属性的注解</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>myAnnotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyField</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//指定此Java属性在数据库的列名</span>    String <span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指定此Java属性在数据库中的字段长度</span>    <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置此字段是否为空</span>    <span class="token keyword">boolean</span> <span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置此字段的数据类型</span>    String <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置此字段是否可以自增</span>    <span class="token keyword">boolean</span> <span class="token function">isAutoIncrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置此字段的默认值</span>    String <span class="token function">Constraint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2、实体类"><a href="#2、实体类" class="headerlink" title="2、实体类"></a>2、实体类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>bean<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>myAnnotation<span class="token punctuation">;</span><span class="token annotation punctuation">@MyTable</span><span class="token punctuation">(</span><span class="token string">"students"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@MyField</span><span class="token punctuation">(</span>columnName <span class="token operator">=</span> <span class="token string">"student_id"</span><span class="token punctuation">,</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token string">" int"</span><span class="token punctuation">,</span> isAutoIncrease <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> Constraint <span class="token operator">=</span> <span class="token string">" primary key"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@MyField</span><span class="token punctuation">(</span>columnName<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">" varchar"</span><span class="token punctuation">,</span> isNull<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> isAutoIncrease <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">,</span> Constraint <span class="token operator">=</span> <span class="token string">" unique"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@MyField</span><span class="token punctuation">(</span>columnName<span class="token operator">=</span><span class="token string">"address"</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">" varchar"</span><span class="token punctuation">,</span> isNull<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> isAutoIncrease <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@MyField</span><span class="token punctuation">(</span>columnName<span class="token operator">=</span><span class="token string">"phone"</span><span class="token punctuation">,</span> length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> type<span class="token operator">=</span><span class="token string">" varchar"</span><span class="token punctuation">,</span> isNull<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> isAutoIncrease <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">,</span> Constraint <span class="token operator">=</span> <span class="token string">" default('12345678910')"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String phone<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPhone</span><span class="token punctuation">(</span>String phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、封装的创表工具类"><a href="#3、封装的创表工具类" class="headerlink" title="3、封装的创表工具类"></a>3、封装的创表工具类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>myAnnotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Annotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CreateSqlTable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">createSql</span><span class="token punctuation">(</span>Class <span class="token class-name">clazz</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>clazz <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历数据表注解</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>Annotation an <span class="token operator">:</span> ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>an <span class="token keyword">instanceof</span> <span class="token class-name">MyTable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//拼接创表语句</span>                    sql <span class="token operator">=</span> <span class="token string">"create table "</span><span class="token punctuation">;</span>                    MyTable myTable <span class="token operator">=</span> <span class="token punctuation">(</span>MyTable<span class="token punctuation">)</span>an<span class="token punctuation">;</span>                    sql <span class="token operator">+=</span> myTable<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"(\n"</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//获取实体类的所有属性</span>                    Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//遍历实体类的所有属性</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//拿到每一个属性上的注解</span>                        Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span> annos <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//遍历每一个属性上的注解</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span>Annotation anno <span class="token operator">:</span> annos<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span>anno <span class="token keyword">instanceof</span> <span class="token class-name">MyField</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">//开始拼接每一个字段的sql语句</span>                                MyField myField <span class="token operator">=</span> <span class="token punctuation">(</span>MyField<span class="token punctuation">)</span>anno<span class="token punctuation">;</span>                                String autoIncrease <span class="token operator">=</span> myField<span class="token punctuation">.</span><span class="token function">isAutoIncrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">" identity"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>                                String length <span class="token operator">=</span> myField<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token string">"("</span><span class="token operator">+</span>myField<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">;</span>                                String isNull <span class="token operator">=</span> myField<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token string">" not null"</span><span class="token punctuation">;</span>                                sql <span class="token operator">+=</span> <span class="token string">"\t"</span> <span class="token operator">+</span> myField<span class="token punctuation">.</span><span class="token function">columnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span> myField<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span> length <span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span> isNull <span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span> autoIncrease <span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span> myField<span class="token punctuation">.</span><span class="token function">Constraint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">",\n"</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    sql <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> sql<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    sql <span class="token operator">+=</span> <span class="token string">");"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> sql<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、测试运行结果"><a href="#4、测试运行结果" class="headerlink" title="4、测试运行结果"></a>4、测试运行结果</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>java<span class="token punctuation">.</span>myAnnotation<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        String sql <span class="token operator">=</span> CreateSqlTable<span class="token punctuation">.</span><span class="token function">createSql</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.jm.annotation2.Student"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5、输出结果"><a href="#5、输出结果" class="headerlink" title="5、输出结果"></a>5、输出结果</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> students<span class="token punctuation">(</span>    student_id <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">identity</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>    name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unique</span><span class="token punctuation">,</span>    address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    phone <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token string">'12345678910'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="二、通过解析XML配置文件，自动链接数据库"><a href="#二、通过解析XML配置文件，自动链接数据库" class="headerlink" title="二、通过解析XML配置文件，自动链接数据库"></a>二、通过解析XML配置文件，自动链接数据库</h2><h3 id="1、数据库配置文件"><a href="#1、数据库配置文件" class="headerlink" title="1、数据库配置文件"></a>1、数据库配置文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlconnection</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- ms sql server链接驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sql2005<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>jdbc:sqlserver://localhost:1433;databaseName=test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span><span class="token punctuation">></span></span>com.microsoft.sqlserver.jdbc.SQLServerDriver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driver</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>sa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pwd</span><span class="token punctuation">></span></span>123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pwd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Mysql链接驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Mysql<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>jdbc:mysql://localhost/hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driver</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pwd</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pwd</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- oracle链接驱动 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oracle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>jdbc:oracle:thin:@localhost:1522/newer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>driver</span><span class="token punctuation">></span></span>jdbc.oracle.OracleDriver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>driver</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>scott<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pwd</span><span class="token punctuation">></span></span>tiger<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pwd</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlconnection</span><span class="token punctuation">></span></span></code></pre><h3 id="2、通过Java解析XML"><a href="#2、通过Java解析XML" class="headerlink" title="2、通过Java解析XML"></a>2、通过Java解析XML</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jm<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>parsers<span class="token punctuation">.</span>DocumentBuilderFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Attr<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Document<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Element<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>NamedNodeMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Node<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>NodeList<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>w3c<span class="token punctuation">.</span>dom<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParseXML</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> <span class="token function">sqlCon</span><span class="token punctuation">(</span>String DbName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文档建立工厂</span>        DocumentBuilderFactory factory <span class="token operator">=</span> DocumentBuilderFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//文档建立器对象:负责解析和创建一个新的xml文档</span>            DocumentBuilder builder <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newDocumentBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//解析文件或创建新的文件</span>            Document document <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"sql_conn.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置根节点</span>            NodeList node <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"sql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历此根节点</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>node<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node num <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>num <span class="token keyword">instanceof</span> <span class="token class-name">Text</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//获取此元素节点的属性 </span>                    NamedNodeMap attrs <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//遍历此元素节点的属性 </span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">&lt;</span>attrs<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Attr attr <span class="token operator">=</span> <span class="token punctuation">(</span>Attr<span class="token punctuation">)</span>attrs<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>DbName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//得到此节点下的所有的孩子节点</span>                            NodeList childNodes <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//遍历所有的孩子节点</span>                            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>childNodes<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                Node ch <span class="token operator">=</span> childNodes<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">;</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token keyword">instanceof</span> <span class="token class-name">Text</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                    Element child <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span>ch<span class="token punctuation">;</span>                                    <span class="token comment" spellcheck="true">//使用map集合存入</span>                                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getNodeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> child<span class="token punctuation">.</span><span class="token function">getLastChild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNodeValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token punctuation">}</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> map<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、获取链接"><a href="#3、获取链接" class="headerlink" title="3、获取链接"></a>3、获取链接</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jm<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetDBConnection</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//链接自己需要的数据库</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> ParseXML<span class="token punctuation">.</span><span class="token function">sqlCon</span><span class="token punctuation">(</span><span class="token string">"sql2005"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>con <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//加载驱动</span>                Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取驱动链接</span>                String url <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//设置用户名和密码</span>                con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> con<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4、测试链接"><a href="#4、测试链接" class="headerlink" title="4、测试链接"></a>4、测试链接</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jm<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> GetDBConnection<span class="token punctuation">.</span><span class="token function">getCon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 反射基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射-3(注解)</title>
      <link href="/2020/04/22/java%E5%8F%8D%E5%B0%84-3/"/>
      <url>/2020/04/22/java%E5%8F%8D%E5%B0%84-3/</url>
      
        <content type="html"><![CDATA[<h2 id="一、注解简介"><a href="#一、注解简介" class="headerlink" title="一、注解简介"></a>一、注解简介</h2><h3 id="1、描述"><a href="#1、描述" class="headerlink" title="1、描述"></a>1、描述</h3><p>&emsp;&emsp;从JDK5开始,Java增加对注解的支持,包含在java.lang.annotation包中,注解的本质其实就是一个继承了 Annotation 接口的接口,其实通俗点讲就是给某一段代码贴个标签,方便机器识别,在很多时候注解也被称之为原数据,在我们平常见得最多的莫过于override</p><h3 id="2、由来"><a href="#2、由来" class="headerlink" title="2、由来"></a>2、由来</h3><p>&emsp;&emsp;以前，XML是各大框架的青睐者，它以松耦合的方式完成了框架中几乎所有的配置，但是随着项目越来越庞大，XML的内容也越来越复杂，维护成本变高。于是就有人提出来一种标记式高耦合的配置方式——注解。方法上可以进行注解，类上也可以注解，字段属性上也可以注解，几乎需要配置的地方都可以进行注解。</p><h3 id="3、优劣"><a href="#3、优劣" class="headerlink" title="3、优劣"></a>3、优劣</h3><p>&emsp;&emsp;关于『注解』和『XML』两种不同的配置模式，各有各的优劣，注解可以提供更大的便捷性，易于维护修改，但耦合度高，而 XML 相对于注解则是相反的。</p><p>&emsp;&emsp;追求低耦合就要抛弃高效率，追求效率必然会遇到耦合。</p><h2 id="二、基本注解"><a href="#二、基本注解" class="headerlink" title="二、基本注解"></a>二、基本注解</h2><h3 id="1、-Overried-——-重写"><a href="#1、-Overried-——-重写" class="headerlink" title="1、@Overried —— 重写"></a>1、@Overried —— 重写</h3><p>&emsp;&emsp;在平常使用最多的一个注解,它表示注解表示的是子类继承父类（或者实现了接口）并且在子类中重写的了父类的方法。</p><h3 id="2、-Deprecated-——-不建议使用"><a href="#2、-Deprecated-——-不建议使用" class="headerlink" title="2、@Deprecated —— 不建议使用"></a>2、@Deprecated —— 不建议使用</h3><p>&emsp;&emsp;被@Deprecated注解修饰的方法是可以使用的但是不建议使用。</p><h3 id="3、-SupperssWarning-——-去除警告信息"><a href="#3、-SupperssWarning-——-去除警告信息" class="headerlink" title="3、@SupperssWarning —— 去除警告信息"></a>3、@SupperssWarning —— 去除警告信息</h3><p>&emsp;&emsp;@SupperssWarning注解可以忽略掉平时代码中的警告</p><h2 id="三、元注解"><a href="#三、元注解" class="headerlink" title="三、元注解"></a>三、元注解</h2><h3 id="1、-Target"><a href="#1、-Target" class="headerlink" title="1、@Target"></a>1、@Target</h3><p>&emsp;&emsp;表示该注解的使用范围</p><p>ElementType参数有：</p><ol><li>CONSTRUCTOR：用于构造器的声明</li><li>FIELD：用于域(属性,字段)声明（包括enum实例）</li><li>LOCAL_VARIABLE：用于局部变量声明</li><li>METHOD：用于方法声明</li><li>PACKAGE：用于包声明</li><li>PARAMETER：用于参数声明</li><li>TYPE：类、接口（包括注解类型）或enum声明</li></ol><h3 id="2、-Retention"><a href="#2、-Retention" class="headerlink" title="2、@Retention"></a>2、@Retention</h3><p>&emsp;&emsp;表示该注解的生命周期</p><p>RetentionPolicy参数有：</p><ol><li>SOURCE：注解保留在源代码级别，编译时就会被忽略</li><li>CLASS：注解编译时被保留，在class文件中存在，但JVM将会忽略</li><li>RUNTIME：JVM将在运行期间保留注解，因此可以通过反射机制读取注解的信息。</li></ol><h3 id="3、-Document"><a href="#3、-Document" class="headerlink" title="3、@Document"></a>3、@Document</h3><p>&emsp;&emsp;表明这个注解要被javadoc记录。注解默认状态下是不被javadoc记录的</p><h3 id="4、-Inherited"><a href="#4、-Inherited" class="headerlink" title="4、@Inherited"></a>4、@Inherited</h3><p>&emsp;&emsp;表明该注解是否影响子类。如果定义的注解上使用了@Inherited标记，则使用该注解的某个父类，它的子类默认继承所有的属性</p><h2 id="四、自定义注解"><a href="#四、自定义注解" class="headerlink" title="四、自定义注解"></a>四、自定义注解</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置注解可使用的位置</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置注解的生命周期</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义name属性</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义value属性</span><span class="token punctuation">}</span></code></pre><h2 id="五、注解与反射"><a href="#五、注解与反射" class="headerlink" title="五、注解与反射"></a>五、注解与反射</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 学生类</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;通过class类的getAnnotation返回该元素的注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取student类的class对象</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回该类的注解</span>        MyAnnotation ma <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>MyAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取得配置内容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ma <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出结果</span><span class="token comment" spellcheck="true">// 张三</span><span class="token comment" spellcheck="true">// 男</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 反射基础 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射-2(类加载器)</title>
      <link href="/2020/04/18/java%E5%8F%8D%E5%B0%84-2/"/>
      <url>/2020/04/18/java%E5%8F%8D%E5%B0%84-2/</url>
      
        <content type="html"><![CDATA[<h2 id="一、类加载器的概述"><a href="#一、类加载器的概述" class="headerlink" title="一、类加载器的概述"></a>一、类加载器的概述</h2><p>&emsp;&emsp; java编译器把java文件编译成”.class文件“，“.class文件”存放着编译后虚拟机指令的二进制信息，当需要某个类时，虚拟机则会加载它，并且在内存中创建对应的class对象，这个过程称为类的加载</p><h2 id="二、类的生命周期"><a href="#二、类的生命周期" class="headerlink" title="二、类的生命周期"></a>二、类的生命周期</h2><h3 id="A、加载"><a href="#A、加载" class="headerlink" title="A、加载"></a>A、加载</h3><p>&emsp;&emsp;开始查找指定包名下的class二进制字节码文件</p><h3 id="B、连接"><a href="#B、连接" class="headerlink" title="B、连接"></a>B、连接</h3><ol><li>验证：确保被加载类的正确性，保证class文件字节流包含的文件信息符合当前虚拟机的要求，不会危害虚拟机的运行</li><li>准备：为类的静态（static）变量开辟内存，并将其初始化为默认值。</li></ol><p><font color="red">注：默认值为变量的默认值，例如：public static int num = 0；</font></p><ol start="3"><li>解析：把类中的符号引用转化为直接引用</li></ol><h3 id="C、初始化"><a href="#C、初始化" class="headerlink" title="C、初始化"></a>C、初始化</h3><p>&emsp;&emsp;类加载的最后阶段，若该类具有父类，则先加载父类的字节码，并进行初始化，执行静态变量赋值和静态代码，初始化成员变量</p><h2 id="三、类加载器的分类"><a href="#三、类加载器的分类" class="headerlink" title="三、类加载器的分类"></a>三、类加载器的分类</h2><h3 id="虚拟机自带的"><a href="#虚拟机自带的" class="headerlink" title="虚拟机自带的"></a>虚拟机自带的</h3><h4 id="1、根类加载器BootStrap"><a href="#1、根类加载器BootStrap" class="headerlink" title="1、根类加载器BootStrap"></a>1、根类加载器BootStrap</h4><h5 id="A、简介"><a href="#A、简介" class="headerlink" title="A、简介"></a>A、简介</h5><p>&emsp;&emsp;根类加载器是最底层的类加载器，也是虚拟机的一部分，没有被继承，它是由C++语言实现的</p><h5 id="B、有无父类加载器"><a href="#B、有无父类加载器" class="headerlink" title="B、有无父类加载器"></a>B、有无父类加载器</h5><p>&emsp;&emsp;没有父加载器</p><h5 id="C、负责加载的范围"><a href="#C、负责加载的范围" class="headerlink" title="C、负责加载的范围"></a>C、负责加载的范围</h5><p>&emsp;&emsp;只加载由系统属性“sun.boot.class.path”指定的路径下的核心类库（即<JAVA_HOME>\jre\lib），并且出于安全考虑，根加载器只加载java，javax，sun开头的类</p><h4 id="2、扩展类加载器Extension"><a href="#2、扩展类加载器Extension" class="headerlink" title="2、扩展类加载器Extension"></a>2、扩展类加载器Extension</h4><h5 id="A、简介-1"><a href="#A、简介-1" class="headerlink" title="A、简介"></a>A、简介</h5><p>&emsp;&emsp;扩展类加载器是由原sun公司实现的sun.,misc.Launcher$ExtClassLoader类（JDK9是jdk.internal.ClassLoader$PlatformClassLoader类），它是由java语言编写</p><h5 id="B、有无父类加载器-1"><a href="#B、有无父类加载器-1" class="headerlink" title="B、有无父类加载器"></a>B、有无父类加载器</h5><p>&emsp;&emsp;父类加载器是根类加载器</p><h5 id="C、负责加载的范围-1"><a href="#C、负责加载的范围-1" class="headerlink" title="C、负责加载的范围"></a>C、负责加载的范围</h5><p>&emsp;&emsp;负责加载<JAVA_HOME>\jre\lib\ext目录下的类库或者系统变量“java.ext.dirs”指定目录下的类库</p><h4 id="3、系统类加载器System"><a href="#3、系统类加载器System" class="headerlink" title="3、系统类加载器System"></a>3、系统类加载器System</h4><h5 id="A、简介-2"><a href="#A、简介-2" class="headerlink" title="A、简介"></a>A、简介</h5><p>&emsp;&emsp;系统类加载器也称应用类加载器，也是纯java类，是原sun公司实现的sun.misc.Launcher$AppClassLoader类（JDK9是jdk.internal.loader.ClassLoader$AppClassLoader）。</p><h5 id="B、有无父类加载器-2"><a href="#B、有无父类加载器-2" class="headerlink" title="B、有无父类加载器"></a>B、有无父类加载器</h5><p>&emsp;&emsp;父类加载器是扩展类加载器</p><h5 id="C、负责加载的范围-2"><a href="#C、负责加载的范围-2" class="headerlink" title="C、负责加载的范围"></a>C、负责加载的范围</h5><p>&emsp;&emsp;负责加载classpath环境变量或者系统属性java.class.path所指定的目录中加载类，它是用户自定义的类加载器的默认父加载器，一般情况下，该类加载器是程序中的默认类加载器，可以通过ClassLoader.getSystemClassLoader()直接获取</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>&emsp;&emsp;java虚拟机对class文件采用的是按需加载方式（需要用到某个class文件的时候才加载该文件），而加载某个类的class文件时，java虚拟机采用的时候双亲委派模式（即自己先不加载类的请求，而把加载类的请求交由父加载器处理，当父加载器加载不到的时候，自己才加载该类的请求），它是一种任务委派模式</p><h3 id="用户自定义的"><a href="#用户自定义的" class="headerlink" title="用户自定义的"></a>用户自定义的</h3><h4 id="A、文件类加载器-ClassLoader"><a href="#A、文件类加载器-ClassLoader" class="headerlink" title="A、文件类加载器(ClassLoader)"></a>A、文件类加载器(ClassLoader)</h4><p>基本方法</p><pre><code>loadClass(String name， boolead resolve)</code></pre><p>&emsp;&emsp;使用指定的二进制名称来加载类，此方法是双亲委派机制的代码实现，在方法的调用中，会调用findLoaderClass(String)来检查是否已经加载过该类，如果没有被加载则会在父类加载器上调用loadClass方法，如果父类加载器为null，则使用虚拟机的内置加载器，如果都没有加载成功，则调用findClass(String name)方法查找此类加载</p><p>&emsp;&emsp;此方法会抛出ClassNotFoundException异常</p><pre><code>findClass(String name)</code></pre><p>&emsp;&emsp;在自定义类加载器时，一般我们需要覆盖这个方法</p><p>&emsp;&emsp;此方法会抛出ClassNotFoundException异常</p><pre><code>defineClass(String name，byte[] b，int off，int len)</code></pre><p>&emsp;&emsp;将我们的字节码解析成虚拟机能识别的class对象</p><p>&emsp;&emsp;此方法会抛出ClassFormatErrorException异常</p><pre><code>resolveClass</code></pre><p>&emsp;&emsp;链接指定的类，类加载器可以使用此方法来链接类</p><h4 id="B、自定义文件类加载器的步骤"><a href="#B、自定义文件类加载器的步骤" class="headerlink" title="B、自定义文件类加载器的步骤"></a>B、自定义文件类加载器的步骤</h4><p>1.继承ClassLoader类</p><p>2.重写findClass方法</p><p>3.创建文件路径</p><p>4.构建输入输出流</p><p>5.返回defineClass()<br>实现代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jm<span class="token punctuation">.</span>classloader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String directory<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyClassLoader</span><span class="token punctuation">(</span>String directory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>directory <span class="token operator">=</span> directory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyClassLoader</span><span class="token punctuation">(</span>String directory <span class="token punctuation">,</span> ClassLoader parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>directory <span class="token operator">=</span> directory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//把类名转换为目录</span>        String file <span class="token operator">=</span> directory <span class="token operator">+</span> File<span class="token punctuation">.</span>separator         <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> File<span class="token punctuation">.</span>separator<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建输入流</span>        InputStream is<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//构建字节输出流</span>            ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span> buff<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            data <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="C、网络类加载器-URLClassLoader"><a href="#C、网络类加载器-URLClassLoader" class="headerlink" title="C、网络类加载器(URLClassLoader)"></a>C、网络类加载器(URLClassLoader)</h4><p>构造方法</p><pre><code>public URLClassLoader(URL[] urls)：指定要加载的类所在的地址，父类加载器默认为系统加载器</code></pre><p>&emsp;</p><pre><code>public URLClassLoader(URL[] urls，CLassLoader parent)：指定要加载的类所在的URL地址，并指定父类加载器</code></pre><h4 id="D、自定义网络类加载器的步骤"><a href="#D、自定义网络类加载器的步骤" class="headerlink" title="D、自定义网络类加载器的步骤"></a>D、自定义网络类加载器的步骤</h4><p>1.继承ClassLoader类</p><p>2.重写findClass方法</p><p>3.创建网络文件路径</p><p>4.构建输入输出流</p><p>5.返回defineClass()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jm<span class="token punctuation">.</span>classloader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>MalformedURLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyURLClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyURLClassLoader</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String path <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream in <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、双亲委派机制"><a href="#四、双亲委派机制" class="headerlink" title="四、双亲委派机制"></a>四、双亲委派机制</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>&emsp;&emsp;除了根类加载器之外，其他的类都需要有自己的父加载器，从JDK1.2开始，类的加载开始使用双亲委派机制（当ClassLoader需要加载一个类的时候，会先让父类去尝试加载，依次逐级向上，一直到根类加载器，当根类加载器加载不到时再由自己加载）真正加载类的类加载器叫做启动类加载器</p><p><font color="red">注:双亲委派机制的父子关系并非面向对象程序设计的继承关系，而是通过使用组合模式来复用父加载器代码</font></p><p>附：委派机制关系图<br><img src="https://s1.ax1x.com/2020/04/18/Jeq8N4.png" alt="&quot;委派机制&quot;" loading="lazy"></p><h3 id="2、优点"><a href="#2、优点" class="headerlink" title="2、优点"></a>2、优点</h3><p>&emsp;&emsp; 1.避免类的重复加载，当父类加载器加载过该类时，就没有必要子类加载器再加载一次</p><p>&emsp;&emsp;2. 可以很好的保护java程序的安全，java的核心API不会被褚篡改，例如：当网络传递一个名为：java.lang.object的类，通过双亲委派机制传递到启动类加载器，而启动类加载器在核心java API里发现有了这个名字的类，说明此类之前已经被加载过了，所以就不会去加载网络传递过来的java.lang.object，继而返回已经加载过的Object.class</p><h2 id="五、热部署类加载器"><a href="#五、热部署类加载器" class="headerlink" title="五、热部署类加载器"></a>五、热部署类加载器</h2><h3 id="为什么要实现热部署"><a href="#为什么要实现热部署" class="headerlink" title="为什么要实现热部署"></a>为什么要实现热部署</h3><p>&emsp;&emsp;当调用classloader方法加载类时，会采用双亲委派机制，即如果类已经被加载，则从缓存中读取，不会重新加载，但是如果同一个类被同一个类加载器多次加载，则会报错</p><h3 id="怎么实现热部署"><a href="#怎么实现热部署" class="headerlink" title="怎么实现热部署"></a>怎么实现热部署</h3><p>&emsp;&emsp;让同一个class文件被不同的类加载器重复加载即可，因此不能调用loaderClass方法，而应该调用findClass方法，避开双亲委托模式，从而实现一个类被多次加载，实现热部署</p><h2 id="六、类的加载方式"><a href="#六、类的加载方式" class="headerlink" title="六、类的加载方式"></a>六、类的加载方式</h2><h3 id="1、显示加载"><a href="#1、显示加载" class="headerlink" title="1、显示加载"></a>1、显示加载</h3><p>&emsp;&emsp;指在java代码中通过调用ClassLoader加载class对象，比如Class.forName(String name)；this.getClass().getClassLoader().loadClass()加载类</p><h3 id="2、隐式加载"><a href="#2、隐式加载" class="headerlink" title="2、隐式加载"></a>2、隐式加载</h3><p>&emsp;&emsp;指不需要在java代码中明确调用加载的代码，而是通过虚拟机自动加载到内存中，比如在加载某个Class时，该Class引用了另外一个类的对象，那么这个类的对象的字节码文件就会被虚拟机自动加载到内存中</p>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 反射基础 类加载器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射-1(基础)</title>
      <link href="/2020/04/16/java%E5%8F%8D%E5%B0%84-1/"/>
      <url>/2020/04/16/java%E5%8F%8D%E5%B0%84-1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>&emsp;&emsp;Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。反射被视为动态语言（程序运行时，允许改变程序结构或变量类型）的关键。</p><h2 id="二、class类"><a href="#二、class类" class="headerlink" title="二、class类"></a>二、class类</h2><h3 id="1、class结构"><a href="#1、class结构" class="headerlink" title="1、class结构"></a>1、class结构</h3><p>&emsp;&emsp;class类是整个反射的源，在jdk1.8的api结构如下</p><pre><code>public final class Class&lt;T&gt;extends Objectimplements Serializable, GenericDeclaration, Type, AnnotatedElement</code></pre><h3 id="2、取得class类对象的三种方式"><a href="#2、取得class类对象的三种方式" class="headerlink" title="2、取得class类对象的三种方式"></a>2、取得class类对象的三种方式</h3><h4 id="1-使用object提供的返回class类对象的方法"><a href="#1-使用object提供的返回class类对象的方法" class="headerlink" title="1. 使用object提供的返回class类对象的方法"></a>1. 使用object提供的返回class类对象的方法</h4><pre class=" language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">clazz</span> <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-利用类-class-Hibernate大多使用此方式"><a href="#2-利用类-class-Hibernate大多使用此方式" class="headerlink" title="2. 利用类.class,Hibernate大多使用此方式"></a>2. 利用类.class,Hibernate大多使用此方式</h4><pre class=" language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-使用class类的静态方法forName-取得，此方法抛出ClassNotFoundException异常"><a href="#3-使用class类的静态方法forName-取得，此方法抛出ClassNotFoundException异常" class="headerlink" title="3. 使用class类的静态方法forName()取得，此方法抛出ClassNotFoundException异常"></a>3. 使用class类的静态方法forName()取得，此方法抛出ClassNotFoundException异常</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.blog.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意此字符串必须是真实路径，就是带包名的类路径，包名.类名</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3、利用class类获得实例化对象"><a href="#3、利用class类获得实例化对象" class="headerlink" title="3、利用class类获得实例化对象"></a>3、利用class类获得实例化对象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获得class对象</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.blog.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1、对于无参构造方法</span>    <span class="token comment" spellcheck="true">//使用class的newInstance()方法实例化对象</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>    Student student1 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2、对于有参构造方法使用Class对象的getConstructor()或getConstructors()方法</span>    <span class="token comment" spellcheck="true">//该方法返回一个来自于java.lang.reflect的Constructor对象,在调用getConstructor()的时候</span>    <span class="token comment" spellcheck="true">//应该保证构造方法和getConstructor()方法中的参数类型为其对应类型的包装对象</span>        <span class="token comment" spellcheck="true">//2-1、取得其中一个构造方法</span>    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> con <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student2 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2-2、取得全部构造方法</span>    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> cons <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cons<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cons<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//注：getConstructor()和getConstructors()方法内的参数只能取得公有的构造方法</span><span class="token comment" spellcheck="true">//并且getConstructor()方法的参数类型,顺序应该与对应类中构造方法的参数类型,顺序保持一致</span>    <span class="token comment" spellcheck="true">//3、对于访问权限为私有的构造方法使用getDeclaredConstructor()或getDeclaredConstructors()。</span>    <span class="token comment" spellcheck="true">//在访问时注意设置setAccessible(true);使其变为可访问的</span>    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> dcon <span class="token operator">=</span>     clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dcon<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student3 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>dcon<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student3<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;通过上述，我们可以知道：即使在我们不知道类的结构，不导入相应的包和类的情况下，也可以进行类的实例化操作</p><p>&emsp;&emsp;<font color="red">值得一提的是：如果使用newInstance实例化对象，必须要求类中存在无参构造方法，因为在默认情况下，class类的newInstance()只能够找到无参，否则请使用getDeclaredConstructor()或getConstructor()方法</font></p><h3 id="4、利用反射取得类中的方法"><a href="#4、利用反射取得类中的方法" class="headerlink" title="4、利用反射取得类中的方法"></a>4、利用反射取得类中的方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//得到class类对象</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.blog.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用构造方法</span>    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> con <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//给构造方法赋值</span>    Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//getMethod(方法名, 方法参数类型)或getMethods()得到所有的普通方法(包括父类的方法)</span>    <span class="token comment" spellcheck="true">//但是无法得到访问权限为私有的方法</span>    <span class="token comment" spellcheck="true">//getMethod(方法名, 方法参数类型)</span>    Method m1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用method.invoke(对象名, 方法参数支持多个参数)调用指定方法</span>    m1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"橘子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//getMethods()</span>    Method m2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Method method <span class="token operator">:</span> m2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//getDeclaredMethod(方法名, 方法参数类型)或getDeclaredMethods()</span>    <span class="token comment" spellcheck="true">//可以得到访问权限为私有的方法,但是父类中的方法无法获取</span>    <span class="token comment" spellcheck="true">//getDeclaredMethod(方法名, 方法参数类型)</span>    Method m3 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"writeDiary"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m3<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"hallo word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//getDeclaredMethods()</span>    Method m4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Method method <span class="token operator">:</span> m4<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;ps:在可以的情况下直接throws Exception</p><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><pre class=" language-java"><code class="language-java">Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输出方法访问权限</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出方法返回值</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出方法名</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String param <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>params<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            param <span class="token operator">+=</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" args"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> params<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                param <span class="token operator">+=</span> <span class="token string">","</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出方法参数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"("</span><span class="token operator">+</span> param <span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取方法包含的所有异常</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> exps<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getExceptionTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>exps<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" throws "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> exps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//输出异常</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> exps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> exps<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"{};"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5、利用反射调用类中的属性"><a href="#5、利用反射调用类中的属性" class="headerlink" title="5、利用反射调用类中的属性"></a>5、利用反射调用类中的属性</h3><h4 id="emsp-emsp-4-1取得所有继承而来的属性"><a href="#emsp-emsp-4-1取得所有继承而来的属性" class="headerlink" title="&emsp;&emsp;4-1取得所有继承而来的属性"></a>&emsp;&emsp;4-1取得所有继承而来的属性</h4><p>&emsp;&emsp;&emsp;&emsp;1. 取得指定属性：getField(String name) </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//得到class类对象</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.blog.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用构造方法</span>Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到name属性</span>Field f1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用Field类中的set方法类似：setName()</span>f1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用Field类中的get方法类似：getName()</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;&emsp;&emsp;2. 取得所有属性：getFields() </p><pre class=" language-java"><code class="language-java">Field f2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Field field <span class="token operator">:</span> f2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="emsp-emsp-4-2取得所有本类定义的属性"><a href="#emsp-emsp-4-2取得所有本类定义的属性" class="headerlink" title="&emsp;&emsp;4-2取得所有本类定义的属性"></a>&emsp;&emsp;4-2取得所有本类定义的属性</h4><p>&emsp;&emsp;&emsp;&emsp;1. 取得指定属性：getDeclaredField(String name) </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//得到class类对象</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.blog.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用构造方法</span>Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到私有的age属性</span>Field f3 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置为可访问的</span>f3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用Field类中的set方法类似：setAge()</span>f3<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用Field类中的set方法类似：getAge()</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;&emsp;&emsp;2. 取得所有属性：getDeclaredFields() </p><pre class=" language-java"><code class="language-java">Field f4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Field field <span class="token operator">:</span> f4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="三、附：Student类内容如下："><a href="#三、附：Student类内容如下：" class="headerlink" title="三、附：Student类内容如下："></a>三、附：Student类内容如下：</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Boolean sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Boolean sex<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是student的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeDiary</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"的日记内容"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span>String subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在学习"</span> <span class="token operator">+</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"student类"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>String foot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在吃"</span> <span class="token operator">+</span> foot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="附：Person类内容如下："><a href="#附：Person类内容如下：" class="headerlink" title="附：Person类内容如下："></a>附：Person类内容如下：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String nationality <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>String foot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 反射基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo初体验</title>
      <link href="/2020/04/07/hexo%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2020/04/07/hexo%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;最近心血来潮，想自己鼓捣一个属于自己的小博客网站，奈何网站备案实在太麻烦<del>emmm实为囊中羞涩(・ε・｀）</del></p><h2 id="一、前期软件准备"><a href="#一、前期软件准备" class="headerlink" title="一、前期软件准备"></a>一、前期软件准备</h2><h3 id="1-git"><a href="#1-git" class="headerlink" title="1 git"></a>1 git</h3><p>&emsp;&emsp;软件下载地址：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p><p>&emsp;&emsp;软件安装：选择合适的版本后下载，傻瓜式安装，一直next即可，安装完成后右键有git的选项即成功</p><h3 id="2-node-js"><a href="#2-node-js" class="headerlink" title="2 node.js"></a>2 node.js</h3><p>&emsp;&emsp;软件下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>&emsp;&emsp;软件安装：根据自己需要，配置一些启动项，（一般会自动的添加path变量，未配置请自行配置）安装完后在git brush 输入node -v提示版本信息即安装成功</p><h3 id="3-npm"><a href="#3-npm" class="headerlink" title="3 npm"></a>3 npm</h3><p>&emsp;&emsp;在安装完node后会自动的安装好npm，不用自己再去安装</p><p>&emsp;&emsp;检测：在git brush输入npm -v提示版本信息安装成功</p><h3 id="4-安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定-多试几次）"><a href="#4-安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定-多试几次）" class="headerlink" title="4 安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定,多试几次）"></a>4 安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定,多试几次）</h3><p>&emsp;&emsp;git brush输入：npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org回车即可安装" target="_blank" rel="noopener">https://registry.npm.taobao.org回车即可安装</a></p><p>&emsp;&emsp;检测：git brush输入cnpm返回cnpm的信息，输入cnpm -v返回cnpm的版本信息</p><h3 id="5-安装hexo（失败重试即可）"><a href="#5-安装hexo（失败重试即可）" class="headerlink" title="5 安装hexo（失败重试即可）"></a>5 安装hexo（失败重试即可）</h3><p>&emsp;&emsp;git brush输入：cnpm install -g hexo-cli 回车即可安装</p><p>&emsp;&emsp;检测：git brush输入hexo -v返回hexo的版本信息</p><h2 id="二、初始化"><a href="#二、初始化" class="headerlink" title="二、初始化"></a>二、初始化</h2><ol><li>新建一个空文件夹</li><li>进入新建好的空文件夹</li><li>右键git brush输入hexo init</li><li>输入hexo s启动hexo服务</li><li>复制控制台中的<a href="http://localhost:4000在浏览器打开，即可看到hexo的默认主题">http://localhost:4000在浏览器打开，即可看到hexo的默认主题</a></li></ol><h2 id="三、部署到github上"><a href="#三、部署到github上" class="headerlink" title="三、部署到github上"></a>三、部署到github上</h2><h3 id="1-申请账号"><a href="#1-申请账号" class="headerlink" title="1 申请账号"></a>1 申请账号</h3><ol><li>申请github账号</li><li>新建github仓库（<span style="color: red;">注意：仓库名的格式必须是自己的账号昵称+.github.io</span>）</li><li>复制好shh地址</li></ol><h3 id="2-生成github密钥"><a href="#2-生成github密钥" class="headerlink" title="2 生成github密钥"></a>2 生成github密钥</h3><ul><li>1.在git中链接自己的仓库<ul><li>1.1 配置用户名：git config –global user.name ‘xxxxx’</li><li>1.2 配置邮箱：git config –global user.email ‘<a href="mailto:xxx@xx.xxx">xxx@xx.xxx</a>’</li></ul></li><li>2.检查是否已经生成ssh<ul><li>1.1 cd ~/.ssh：如果能进入到.ssh文件目录下 ，则证明，之前生成过.ssh秘钥，可以直接使用里面的秘钥。 如果没有则需要生成新的密钥</li></ul></li><li>3.生成密钥<ul><li>1.1 ssh-keygen -t rsa -C ‘<a href="mailto:xxx@xx.xxx">xxx@xx.xxx</a>’ //配置的邮箱</li><li>1.2 接着按3个回车</li></ul></li><li>4.成功结果<pre><code>  Generating public/private rsa key pair.  Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):  Enter passphrase (empty for no passphrase):  Enter same passphrase again:  Your identification has been saved in /c/Users/Administrator/.ssh/id_rsa.  Your public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub.  The key fingerprint is:  SHA256:zA6wNJrFB6NcqS6eBog/AHlzQuvFjYpG759Yhh1lWGI xxxxxx@xxxxx.xxx(上面自己的邮箱)  The key&#39;s randomart image is:  +---[RSA 2048]----+  |    +E .         |  | ..+oo+          |  | oo+*+.o         |  |o.*===+o         |  |==+*... S        |  |B.+.o .o         |  |++o. +  .        |  | +o.+ .          |  |.  o.o           |  +----[SHA256]-----+</code></pre>&emsp;&emsp;可以看到在c/Users/Administrator/.ssh/目录下生成了两个文件：id_rsa（私有密钥）和id_rsa.pub（公有密钥），使用记事本等软件打开id_rsa.pub文件，将里面的内容复制，粘贴到github的New SSH key</li></ul><h3 id="3-安装hexo部署插件"><a href="#3-安装hexo部署插件" class="headerlink" title="3 安装hexo部署插件"></a>3 安装hexo部署插件</h3><p>&emsp;&emsp;打开git brush输入cnpm install –save hexo-deployer-git</p><h3 id="4-修改新建文件下的-config-yml文件"><a href="#4-修改新建文件下的-config-yml文件" class="headerlink" title="4 修改新建文件下的_config.yml文件"></a>4 修改新建文件下的_config.yml文件</h3><p>&emsp;&emsp;找到以下代码，一般位于_config.yml文件的最后（原始的是没有repo，和branch的，而且type后面也没有东西）<br>对这段代码进行更改</p><pre><code>#Deployment#docs:https://hexo.io/docs/deployment.htmlE deploy    type: git   #一个名字，建议写成git方便识别，一般填git    repo: gitcgithub com: hansonpang9g/hansonpang99 githubio. git #填写ssh地址    branch: master  #分支，默认master</code></pre><h3 id="5-最后在Git-brush里面输入-hexo-d-将本地文件部署到github新建的仓库中"><a href="#5-最后在Git-brush里面输入-hexo-d-将本地文件部署到github新建的仓库中" class="headerlink" title="5 最后在Git brush里面输入 hexo d 将本地文件部署到github新建的仓库中"></a>5 最后在Git brush里面输入 hexo d 将本地文件部署到github新建的仓库中</h3><h2 id="四、修改主题"><a href="#四、修改主题" class="headerlink" title="四、修改主题"></a>四、修改主题</h2><ol><li>下载主题 git clone 主题地址 themes/主题名</li><li>修改新建文件下的_config.yml文件，找到theme修改为自己的主题名</li><li>hexo clean清除编译好的静态网站</li><li>hexo g重新生成静态网站</li><li>hexo s部署到本地服务器，方便预览</li><li>hexo d部署到github服务器</li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 使用方法 笔记 hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="/2020/04/04/my-first-blog/"/>
      <url>/2020/04/04/my-first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown的初步使用"><a href="#markdown的初步使用" class="headerlink" title="markdown的初步使用"></a>markdown的初步使用</h1><h2 id="一、格式"><a href="#一、格式" class="headerlink" title="一、格式"></a>一、格式</h2><h3 id="1、标题的使用"><a href="#1、标题的使用" class="headerlink" title="1、标题的使用"></a>1、标题的使用</h3><p>&emsp;&emsp;在使用标题的时候只需要在前面加上#号即可，一个#是一级标题，三个#是三级标题，以此类推。支持六级标题。</p><p><font color="red">注：标准语法一般在#后跟个空格再写文字。否则极有可能生成不了标题</font></p><h3 id="2、段落的使用"><a href="#2、段落的使用" class="headerlink" title="2、段落的使用"></a>2、段落的使用</h3><p>&emsp;&emsp;Markdown的段落划分非常简单，直接在每个段落后面加上回车即可</p><h3 id="3、字体样式"><a href="#3、字体样式" class="headerlink" title="3、字体样式"></a>3、字体样式</h3><h4 id="a-加粗"><a href="#a-加粗" class="headerlink" title="a.加粗"></a>a.加粗</h4><p>&emsp;&emsp;要<strong>加粗</strong>的文字左右分别用两个*号包起来</p><h4 id="b-斜体"><a href="#b-斜体" class="headerlink" title="b.斜体"></a>b.斜体</h4><p>&emsp;&emsp;要<em>倾斜</em>的文字左右分别用一个*号包起来</p><h4 id="c-斜体加粗"><a href="#c-斜体加粗" class="headerlink" title="c.斜体加粗"></a>c.斜体加粗</h4><p>&emsp;&emsp;要<strong><em>加粗并倾斜</em></strong>的文字左右分别用三个*号包起来</p><h4 id="d-删除线"><a href="#d-删除线" class="headerlink" title="d.删除线"></a>d.删除线</h4><p>&emsp;&emsp;要<del>删除</del>的文字左右分别用两个~~号包起来</p><h3 id="4、区块引用"><a href="#4、区块引用" class="headerlink" title="4、区块引用"></a>4、区块引用</h3><p>&emsp;&emsp;如果我们需要对一段内容进行强调显示时，只需要在引用的文字前加&gt;即可。此外引用也可以嵌套，如：加两个&gt;&gt;三个&gt;&gt;&gt;</p><blockquote><p>这是一段引用的内容</p><blockquote><p>这也是一段引用的内容，只不过在前面加了两个&gt;被嵌套了</p></blockquote></blockquote><h3 id="5、分割线"><a href="#5、分割线" class="headerlink" title="5、分割线"></a>5、分割线</h3><p>&emsp;&emsp;在空白的地方加上三个或者三个以上的 - 或者 * 都可以。</p><pre><code>---***----****</code></pre><hr><h2 id="二、图片"><a href="#二、图片" class="headerlink" title="二、图片"></a>二、图片</h2><p>&emsp;&emsp;语法：</p><pre><code>![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>&emsp;&emsp;例如：</p><pre><code>![&quot;金钱&quot;](https://desk-fd.zol-img.com.cn/t_s960x600c5/g5/M00/02/02/ChMkJlbKxaaIEb-jAAQVU_xtk6IAALHZAN0f1MABBVr708.jpg &quot;金钱&quot;)</code></pre><p><img src="https://desk-fd.zol-img.com.cn/t_s960x600c5/g5/M00/02/02/ChMkJlbKxaaIEb-jAAQVU_xtk6IAALHZAN0f1MABBVr708.jpg" alt="&quot;金钱&quot;" title="金钱" loading="lazy"></p><p>&emsp;&emsp;markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。<br>关于图床的选择我写了一篇文章，对网上存在的各种方法做了总结，需要的朋友可以看看<a href="https://www.jianshu.com/p/ea1eb11db63f" target="_blank" rel="noopener">markdown图床</a></p><h2 id="三、超链接"><a href="#三、超链接" class="headerlink" title="三、超链接"></a>三、超链接</h2><p>&emsp;&emsp;超连接用法示例（注：此功能在IE浏览器无法实现）</p><pre><code>[提示文字](连接地址)[百度](www.baidu.com)</code></pre><p>&emsp;&emsp;<br>    点击<a href="www.biadu.com">百度</a>一下</p><h2 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h2><h3 id="1、无序列表"><a href="#1、无序列表" class="headerlink" title="1、无序列表"></a>1、无序列表</h3><p>&emsp;&emsp;示例</p><pre><code>使用无序列表有三种方式- 列表文本前使用 减号+空格+ 列表文本前使用 加号+空格* 列表文本前使用 星号+空格</code></pre><p>&emsp;&emsp;效果</p><ul><li>这是减号+空格</li></ul><ul><li>这是加号+空格</li></ul><ul><li>这是星号+空格</li></ul><h3 id="2、有序列表"><a href="#2、有序列表" class="headerlink" title="2、有序列表"></a>2、有序列表</h3><p>&emsp;&emsp;示例</p><pre><code>列表前使用 数字+点+空格不用担心数字不对，markdown会自动识别</code></pre><p>&emsp;&emsp;效果</p><ol><li>这是1.</li><li>这也是1.</li></ol><h2 id="五、代码域"><a href="#五、代码域" class="headerlink" title="五、代码域"></a>五、代码域</h2><p>&emsp;&emsp;markdown里对代码块的引用语法是三个撇[ ``` ],在其后可增加代码名称,比如java,js等标记该部分代码的类型.之后在页面展现的时候就可以高亮显示关键字了。记得在结束的位置也加上三个撇，防止后面的文字被识别为代码，比如下面这段代码:</p><pre><code>（```）java    public class Test{        public static void main(String[] args) {            System.out.println(&quot;hallo word&quot;);        }    }（```）</code></pre><p>&emsp;&emsp;效果如下</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hallo word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="六、推荐阅读"><a href="#六、推荐阅读" class="headerlink" title="六、推荐阅读"></a>六、推荐阅读</h2><p>&emsp;&emsp;markdown官方文档<br>&emsp;&emsp;<a href="https://markdown.tw/" target="_blank" rel="noopener">https://markdown.tw/</a></p><p>&emsp;&emsp;markdown标准<br>&emsp;&emsp;<a href="https://commonmark.org/help/" target="_blank" rel="noopener">https://commonmark.org/help/</a></p><p>&emsp;&emsp;github的markdown标准<br>&emsp;&emsp;<a href="https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown" target="_blank" rel="noopener">https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新手 Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
