<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java反射-3(注解)</title>
      <link href="/2020/04/22/java%E5%8F%8D%E5%B0%84-3/"/>
      <url>/2020/04/22/java%E5%8F%8D%E5%B0%84-3/</url>
      
        <content type="html"><![CDATA[<h2 id="注解简介"><a href="#注解简介" class="headerlink" title="注解简介"></a>注解简介</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>&emsp;&emsp;从JDK5开始,Java增加对注解的支持,包含在java.lang.annotation包中,注解的本质其实就是一个继承了 Annotation 接口的接口,其实通俗点讲就是给某一段代码贴个标签,方便机器识别,在很多时候注解也被称之为原数据,在我们平常见得最多的莫过于override</p><h3 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h3><p>&emsp;&emsp;以前，XML是各大框架的青睐者，它以松耦合的方式完成了框架中几乎所有的配置，但是随着项目越来越庞大，XML的内容也越来越复杂，维护成本变高。于是就有人提出来一种标记式高耦合的配置方式——注解。方法上可以进行注解，类上也可以注解，字段属性上也可以注解，几乎需要配置的地方都可以进行注解。</p><h3 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h3><p>&emsp;&emsp;关于『注解』和『XML』两种不同的配置模式，各有各的优劣，注解可以提供更大的便捷性，易于维护修改，但耦合度高，而 XML 相对于注解则是相反的。</p><p>&emsp;&emsp;追求低耦合就要抛弃高效率，追求效率必然会遇到耦合。</p><h2 id="基本注解"><a href="#基本注解" class="headerlink" title="基本注解"></a>基本注解</h2><h3 id="Overried-——-重写"><a href="#Overried-——-重写" class="headerlink" title="@Overried —— 重写"></a>@Overried —— 重写</h3><p>&emsp;&emsp;在平常使用最多的一个注解,它表示注解表示的是子类继承父类（或者实现了接口）并且在子类中重写的了父类的方法。</p><h3 id="Deprecated-——-不建议使用"><a href="#Deprecated-——-不建议使用" class="headerlink" title="@Deprecated —— 不建议使用"></a>@Deprecated —— 不建议使用</h3><p>&emsp;&emsp;被@Deprecated注解修饰的方法是可以使用的但是不建议使用。</p><h3 id="SupperssWarning-——-去除警告信息"><a href="#SupperssWarning-——-去除警告信息" class="headerlink" title="@SupperssWarning —— 去除警告信息"></a>@SupperssWarning —— 去除警告信息</h3><p>&emsp;&emsp;@SupperssWarning注解可以忽略掉平时代码中的警告</p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><h3 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h3><p>&emsp;&emsp;表示该注解的使用范围</p><p>ElementType参数有：</p><ol><li>CONSTRUCTOR：用于构造器的声明</li><li>FIELD：用于域(属性,字段)声明（包括enum实例）</li><li>LOCAL_VARIABLE：用于局部变量声明</li><li>METHOD：用于方法声明</li><li>PACKAGE：用于包声明</li><li>PARAMETER：用于参数声明</li><li>TYPE：类、接口（包括注解类型）或enum声明</li></ol><h3 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h3><p>&emsp;&emsp;表示该注解的生命周期</p><p>RetentionPolicy参数有：</p><ol><li>SOURCE：注解保留在源代码级别，编译时就会被忽略</li><li>CLASS：注解编译时被保留，在class文件中存在，但JVM将会忽略</li><li>RUNTIME：JVM将在运行期间保留注解，因此可以通过反射机制读取注解的信息。</li></ol><h3 id="Document"><a href="#Document" class="headerlink" title="@Document"></a>@Document</h3><p>&emsp;&emsp;表明这个注解要被javadoc记录。注解默认状态下是不被javadoc记录的</p><h3 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h3><p>&emsp;&emsp;表明该注解是否影响子类。如果定义的注解上使用了@Inherited标记，则使用该注解的某个父类，它的子类默认继承所有的属性</p><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ElementType<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Retention<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RetentionPolicy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置注解可使用的位置</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置注解的生命周期</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义name属性</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义value属性</span><span class="token punctuation">}</span></code></pre><h2 id="注解与反射"><a href="#注解与反射" class="headerlink" title="注解与反射"></a>注解与反射</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 学生类</span><span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;通过class类的getAnnotation返回该元素的注解</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取student类的class对象</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回该类的注解</span>        MyAnnotation ma <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>MyAnnotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取得配置内容</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ma <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出结果</span><span class="token comment" spellcheck="true">// 张三</span><span class="token comment" spellcheck="true">// 男</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 反射基础 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射-2(类加载器)</title>
      <link href="/2020/04/18/java%E5%8F%8D%E5%B0%84-2/"/>
      <url>/2020/04/18/java%E5%8F%8D%E5%B0%84-2/</url>
      
        <content type="html"><![CDATA[<h2 id="类加载器的概述"><a href="#类加载器的概述" class="headerlink" title="类加载器的概述"></a>类加载器的概述</h2><p>&emsp;&emsp; java编译器把java文件编译成”.class文件“，“.class文件”存放着编译后虚拟机指令的二进制信息，当需要某个类时，虚拟机则会加载它，并且在内存中创建对应的class对象，这个过程称为类的加载</p><h2 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h2><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>&emsp;&emsp;开始查找指定包名下的class二进制字节码文件</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><ol><li>验证：确保被加载类的正确性，保证class文件字节流包含的文件信息符合当前虚拟机的要求，不会危害虚拟机的运行</li><li>准备：为类的静态（static）变量开辟内存，并将其初始化为默认值。</li></ol><p><font color="red">注：默认值为变量的默认值，例如：public static int num = 0；</font></p><ol start="3"><li>解析：把类中的符号引用转化为直接引用</li></ol><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>&emsp;&emsp;类加载的最后阶段，若该类具有父类，则先加载父类的字节码，并进行初始化，执行静态变量赋值和静态代码，初始化成员变量</p><h2 id="类加载器的分类"><a href="#类加载器的分类" class="headerlink" title="类加载器的分类"></a>类加载器的分类</h2><h3 id="虚拟机自带的"><a href="#虚拟机自带的" class="headerlink" title="虚拟机自带的"></a>虚拟机自带的</h3><h4 id="1、根类加载器BootStrap"><a href="#1、根类加载器BootStrap" class="headerlink" title="1、根类加载器BootStrap"></a>1、根类加载器BootStrap</h4><h5 id="A、简介"><a href="#A、简介" class="headerlink" title="A、简介"></a>A、简介</h5><p>&emsp;&emsp;根类加载器是最底层的类加载器，也是虚拟机的一部分，没有被继承，它是由C++语言实现的</p><h5 id="B、有无父类加载器"><a href="#B、有无父类加载器" class="headerlink" title="B、有无父类加载器"></a>B、有无父类加载器</h5><p>&emsp;&emsp;没有父加载器</p><h5 id="C、负责加载的范围"><a href="#C、负责加载的范围" class="headerlink" title="C、负责加载的范围"></a>C、负责加载的范围</h5><p>&emsp;&emsp;只加载由系统属性“sun.boot.class.path”指定的路径下的核心类库（即<JAVA_HOME>\jre\lib），并且出于安全考虑，根加载器只加载java，javax，sun开头的类</p><h4 id="2、扩展类加载器Extension"><a href="#2、扩展类加载器Extension" class="headerlink" title="2、扩展类加载器Extension"></a>2、扩展类加载器Extension</h4><h5 id="A、简介-1"><a href="#A、简介-1" class="headerlink" title="A、简介"></a>A、简介</h5><p>&emsp;&emsp;扩展类加载器是由原sun公司实现的sun.,misc.Launcher$ExtClassLoader类（JDK9是jdk.internal.ClassLoader$PlatformClassLoader类），它是由java语言编写</p><h5 id="B、有无父类加载器-1"><a href="#B、有无父类加载器-1" class="headerlink" title="B、有无父类加载器"></a>B、有无父类加载器</h5><p>&emsp;&emsp;父类加载器是根类加载器</p><h5 id="C、负责加载的范围-1"><a href="#C、负责加载的范围-1" class="headerlink" title="C、负责加载的范围"></a>C、负责加载的范围</h5><p>&emsp;&emsp;负责加载<JAVA_HOME>\jre\lib\ext目录下的类库或者系统变量“java.ext.dirs”指定目录下的类库</p><h4 id="3、系统类加载器System"><a href="#3、系统类加载器System" class="headerlink" title="3、系统类加载器System"></a>3、系统类加载器System</h4><h5 id="A、简介-2"><a href="#A、简介-2" class="headerlink" title="A、简介"></a>A、简介</h5><p>&emsp;&emsp;系统类加载器也称应用类加载器，也是纯java类，是原sun公司实现的sun.misc.Launcher$AppClassLoader类（JDK9是jdk.internal.loader.ClassLoader$AppClassLoader）。</p><h5 id="B、有无父类加载器-2"><a href="#B、有无父类加载器-2" class="headerlink" title="B、有无父类加载器"></a>B、有无父类加载器</h5><p>&emsp;&emsp;父类加载器是扩展类加载器</p><h5 id="C、负责加载的范围-2"><a href="#C、负责加载的范围-2" class="headerlink" title="C、负责加载的范围"></a>C、负责加载的范围</h5><p>&emsp;&emsp;负责加载classpath环境变量或者系统属性java.class.path所指定的目录中加载类，它是用户自定义的类加载器的默认父加载器，一般情况下，该类加载器是程序中的默认类加载器，可以通过ClassLoader.getSystemClassLoader()直接获取</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>&emsp;&emsp;java虚拟机对class文件采用的是按需加载方式（需要用到某个class文件的时候才加载该文件），而加载某个类的class文件时，java虚拟机采用的时候双亲委派模式（即自己先不加载类的请求，而把加载类的请求交由父加载器处理，当父加载器加载不到的时候，自己才加载该类的请求），它是一种任务委派模式</p><h3 id="用户自定义的"><a href="#用户自定义的" class="headerlink" title="用户自定义的"></a>用户自定义的</h3><h4 id="文件类加载器-ClassLoader"><a href="#文件类加载器-ClassLoader" class="headerlink" title="文件类加载器(ClassLoader)"></a>文件类加载器(ClassLoader)</h4><p>基本方法</p><pre><code>loadClass(String name， boolead resolve)</code></pre><p>&emsp;&emsp;使用指定的二进制名称来加载类，此方法是双亲委派机制的代码实现，在方法的调用中，会调用findLoaderClass(String)来检查是否已经加载过该类，如果没有被加载则会在父类加载器上调用loadClass方法，如果父类加载器为null，则使用虚拟机的内置加载器，如果都没有加载成功，则调用findClass(String name)方法查找此类加载</p><p>&emsp;&emsp;此方法会抛出ClassNotFoundException异常</p><pre><code>findClass(String name)</code></pre><p>&emsp;&emsp;在自定义类加载器时，一般我们需要覆盖这个方法</p><p>&emsp;&emsp;此方法会抛出ClassNotFoundException异常</p><pre><code>defineClass(String name，byte[] b，int off，int len)</code></pre><p>&emsp;&emsp;将我们的字节码解析成虚拟机能识别的class对象</p><p>&emsp;&emsp;此方法会抛出ClassFormatErrorException异常</p><pre><code>resolveClass</code></pre><p>&emsp;&emsp;链接指定的类，类加载器可以使用此方法来链接类</p><h4 id="自定义文件类加载器的步骤"><a href="#自定义文件类加载器的步骤" class="headerlink" title="自定义文件类加载器的步骤"></a>自定义文件类加载器的步骤</h4><p>1.继承ClassLoader类</p><p>2.重写findClass方法</p><p>3.创建文件路径</p><p>4.构建输入输出流</p><p>5.返回defineClass()<br>实现代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jm<span class="token punctuation">.</span>classloader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String directory<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyClassLoader</span><span class="token punctuation">(</span>String directory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>directory <span class="token operator">=</span> directory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyClassLoader</span><span class="token punctuation">(</span>String directory <span class="token punctuation">,</span> ClassLoader parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>directory <span class="token operator">=</span> directory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//把类名转换为目录</span>        String file <span class="token operator">=</span> directory <span class="token operator">+</span> File<span class="token punctuation">.</span>separator         <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> File<span class="token punctuation">.</span>separator<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构建输入流</span>        InputStream is<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//构建字节输出流</span>            ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span> buff<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            data <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>data<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="网络类加载器-URLClassLoader"><a href="#网络类加载器-URLClassLoader" class="headerlink" title="网络类加载器(URLClassLoader)"></a>网络类加载器(URLClassLoader)</h4><p>构造方法</p><pre><code>public URLClassLoader(URL[] urls)：指定要加载的类所在的地址，父类加载器默认为系统加载器</code></pre><p>&emsp;</p><pre><code>public URLClassLoader(URL[] urls，CLassLoader parent)：指定要加载的类所在的URL地址，并指定父类加载器</code></pre><h4 id="自定义网络类加载器的步骤"><a href="#自定义网络类加载器的步骤" class="headerlink" title="自定义网络类加载器的步骤"></a>自定义网络类加载器的步骤</h4><p>1.继承ClassLoader类</p><p>2.重写findClass方法</p><p>3.创建网络文件路径</p><p>4.构建输入输出流</p><p>5.返回defineClass()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>jm<span class="token punctuation">.</span>classloader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>MalformedURLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyURLClassLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyURLClassLoader</span><span class="token punctuation">(</span>String url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">findClass</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        String path <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        InputStream in <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            baos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        baos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>&emsp;&emsp;除了根类加载器之外，其他的类都需要有自己的父加载器，从JDK1.2开始，类的加载开始使用双亲委派机制（当ClassLoader需要加载一个类的时候，会先让父类去尝试加载，依次逐级向上，一直到根类加载器，当根类加载器加载不到时再由自己加载）真正加载类的类加载器叫做启动类加载器</p><p><font color="red">注:双亲委派机制的父子关系并非面向对象程序设计的继承关系，而是通过使用组合模式来复用父加载器代码</font></p><p>附：委派机制关系图<br><img src="https://s1.ax1x.com/2020/04/18/Jeq8N4.png" alt="&quot;委派机制&quot;" loading="lazy"></p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>&emsp;&emsp; 1.避免类的重复加载，当父类加载器加载过该类时，就没有必要子类加载器再加载一次</p><p>&emsp;&emsp;2. 可以很好的保护java程序的安全，java的核心API不会被褚篡改，例如：当网络传递一个名为：java.lang.object的类，通过双亲委派机制传递到启动类加载器，而启动类加载器在核心java API里发现有了这个名字的类，说明此类之前已经被加载过了，所以就不会去加载网络传递过来的java.lang.object，继而返回已经加载过的Object.class</p><h2 id="热部署类加载器"><a href="#热部署类加载器" class="headerlink" title="热部署类加载器"></a>热部署类加载器</h2><h3 id="为什么要实现热部署"><a href="#为什么要实现热部署" class="headerlink" title="为什么要实现热部署"></a>为什么要实现热部署</h3><p>&emsp;&emsp;当调用classloader方法加载类时，会采用双亲委派机制，即如果类已经被加载，则从缓存中读取，不会重新加载，但是如果同一个类被同一个类加载器多次加载，则会报错</p><h3 id="怎么实现热部署"><a href="#怎么实现热部署" class="headerlink" title="怎么实现热部署"></a>怎么实现热部署</h3><p>&emsp;&emsp;让同一个class文件被不同的类加载器重复加载即可，因此不能调用loaderClass方法，而应该调用findClass方法，避开双亲委托模式，从而实现一个类被多次加载，实现热部署</p><h2 id="类的加载方式"><a href="#类的加载方式" class="headerlink" title="类的加载方式"></a>类的加载方式</h2><h3 id="显示加载"><a href="#显示加载" class="headerlink" title="显示加载"></a>显示加载</h3><p>&emsp;&emsp;指在java代码中通过调用ClassLoader加载class对象，比如Class.forName(String name)；this.getClass().getClassLoader().loadClass()加载类</p><h3 id="隐式加载"><a href="#隐式加载" class="headerlink" title="隐式加载"></a>隐式加载</h3><p>&emsp;&emsp;指不需要在java代码中明确调用加载的代码，而是通过虚拟机自动加载到内存中，比如在加载某个Class时，该Class引用了另外一个类的对象，那么这个类的对象的字节码文件就会被虚拟机自动加载到内存中</p>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 反射基础 类加载器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射-1(基础)</title>
      <link href="/2020/04/16/java%E5%8F%8D%E5%B0%84-1/"/>
      <url>/2020/04/16/java%E5%8F%8D%E5%B0%84-1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>&emsp;&emsp;Java的反射（reflection）机制是指在程序的运行状态中，可以构造任意一个类的对象，可以了解任意一个对象所属的类，可以了解任意一个类的成员变量和方法，可以调用任意一个对象的属性和方法。这种动态获取程序信息以及动态调用对象的功能称为Java语言的反射机制。反射被视为动态语言（程序运行时，允许改变程序结构或变量类型）的关键。</p><h2 id="二、class类"><a href="#二、class类" class="headerlink" title="二、class类"></a>二、class类</h2><h3 id="1、class结构"><a href="#1、class结构" class="headerlink" title="1、class结构"></a>1、class结构</h3><p>&emsp;&emsp;class类是整个反射的源，在jdk1.8的api结构如下</p><pre><code>public final class Class&lt;T&gt;extends Objectimplements Serializable, GenericDeclaration, Type, AnnotatedElement</code></pre><h3 id="2、取得class类对象的三种方式"><a href="#2、取得class类对象的三种方式" class="headerlink" title="2、取得class类对象的三种方式"></a>2、取得class类对象的三种方式</h3><h4 id="1-使用object提供的返回class类对象的方法"><a href="#1-使用object提供的返回class类对象的方法" class="headerlink" title="1. 使用object提供的返回class类对象的方法"></a>1. 使用object提供的返回class类对象的方法</h4><pre class=" language-java"><code class="language-java">Student student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">clazz</span> <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-利用类-class-Hibernate大多使用此方式"><a href="#2-利用类-class-Hibernate大多使用此方式" class="headerlink" title="2. 利用类.class,Hibernate大多使用此方式"></a>2. 利用类.class,Hibernate大多使用此方式</h4><pre class=" language-java"><code class="language-java">Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="3-使用class类的静态方法forName-取得，此方法抛出ClassNotFoundException异常"><a href="#3-使用class类的静态方法forName-取得，此方法抛出ClassNotFoundException异常" class="headerlink" title="3. 使用class类的静态方法forName()取得，此方法抛出ClassNotFoundException异常"></a>3. 使用class类的静态方法forName()取得，此方法抛出ClassNotFoundException异常</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    Class <span class="token class-name">clazz</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.blog.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意此字符串必须是真实路径，就是带包名的类路径，包名.类名</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3、利用class类获得实例化对象"><a href="#3、利用class类获得实例化对象" class="headerlink" title="3、利用class类获得实例化对象"></a>3、利用class类获得实例化对象</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获得class对象</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.blog.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//1、对于无参构造方法</span>    <span class="token comment" spellcheck="true">//使用class的newInstance()方法实例化对象</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>    Student student1 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//2、对于有参构造方法使用Class对象的getConstructor()或getConstructors()方法</span>    <span class="token comment" spellcheck="true">//该方法返回一个来自于java.lang.reflect的Constructor对象,在调用getConstructor()的时候</span>    <span class="token comment" spellcheck="true">//应该保证构造方法和getConstructor()方法中的参数类型为其对应类型的包装对象</span>        <span class="token comment" spellcheck="true">//2-1、取得其中一个构造方法</span>    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> con <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student2 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2-2、取得全部构造方法</span>    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> cons <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cons<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cons<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//注：getConstructor()和getConstructors()方法内的参数只能取得公有的构造方法</span><span class="token comment" spellcheck="true">//并且getConstructor()方法的参数类型,顺序应该与对应类中构造方法的参数类型,顺序保持一致</span>    <span class="token comment" spellcheck="true">//3、对于访问权限为私有的构造方法使用getDeclaredConstructor()或getDeclaredConstructors()。</span>    <span class="token comment" spellcheck="true">//在访问时注意设置setAccessible(true);使其变为可访问的</span>    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> dcon <span class="token operator">=</span>     clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dcon<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student student3 <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>dcon<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student3<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;通过上述，我们可以知道：即使在我们不知道类的结构，不导入相应的包和类的情况下，也可以进行类的实例化操作</p><p>&emsp;&emsp;<font color="red">值得一提的是：如果使用newInstance实例化对象，必须要求类中存在无参构造方法，因为在默认情况下，class类的newInstance()只能够找到无参，否则请使用getDeclaredConstructor()或getConstructor()方法</font></p><h3 id="4、利用反射取得类中的方法"><a href="#4、利用反射取得类中的方法" class="headerlink" title="4、利用反射取得类中的方法"></a>4、利用反射取得类中的方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//得到class类对象</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.blog.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调用构造方法</span>    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> con <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//给构造方法赋值</span>    Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>con<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//getMethod(方法名, 方法参数类型)或getMethods()得到所有的普通方法(包括父类的方法)</span>    <span class="token comment" spellcheck="true">//但是无法得到访问权限为私有的方法</span>    <span class="token comment" spellcheck="true">//getMethod(方法名, 方法参数类型)</span>    Method m1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"eat"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用method.invoke(对象名, 方法参数支持多个参数)调用指定方法</span>    m1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"橘子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//getMethods()</span>    Method m2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Method method <span class="token operator">:</span> m2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//getDeclaredMethod(方法名, 方法参数类型)或getDeclaredMethods()</span>    <span class="token comment" spellcheck="true">//可以得到访问权限为私有的方法,但是父类中的方法无法获取</span>    <span class="token comment" spellcheck="true">//getDeclaredMethod(方法名, 方法参数类型)</span>    Method m3 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"writeDiary"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m3<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"hallo word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//getDeclaredMethods()</span>    Method m4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Method method <span class="token operator">:</span> m4<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>&emsp;&emsp;ps:在可以的情况下直接throws Exception</p><h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><pre class=" language-java"><code class="language-java">Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输出方法访问权限</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>Modifier<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出方法返回值</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出方法名</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String param <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>params<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            param <span class="token operator">+=</span> params<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" args"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> params<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                param <span class="token operator">+=</span> <span class="token string">","</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出方法参数</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"("</span><span class="token operator">+</span> param <span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取方法包含的所有异常</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> exps<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getExceptionTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>exps<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" throws "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> exps<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//输出异常</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" "</span> <span class="token operator">+</span> exps<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> exps<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"{};"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="5、利用反射调用类中的属性"><a href="#5、利用反射调用类中的属性" class="headerlink" title="5、利用反射调用类中的属性"></a>5、利用反射调用类中的属性</h3><h4 id="emsp-emsp-4-1取得所有继承而来的属性"><a href="#emsp-emsp-4-1取得所有继承而来的属性" class="headerlink" title="&emsp;&emsp;4-1取得所有继承而来的属性"></a>&emsp;&emsp;4-1取得所有继承而来的属性</h4><p>&emsp;&emsp;&emsp;&emsp;1. 取得指定属性：getField(String name) </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//得到class类对象</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.blog.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用构造方法</span>Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到name属性</span>Field f1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用Field类中的set方法类似：setName()</span>f1<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用Field类中的get方法类似：getName()</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;&emsp;&emsp;2. 取得所有属性：getFields() </p><pre class=" language-java"><code class="language-java">Field f2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Field field <span class="token operator">:</span> f2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="emsp-emsp-4-2取得所有本类定义的属性"><a href="#emsp-emsp-4-2取得所有本类定义的属性" class="headerlink" title="&emsp;&emsp;4-2取得所有本类定义的属性"></a>&emsp;&emsp;4-2取得所有本类定义的属性</h4><p>&emsp;&emsp;&emsp;&emsp;1. 取得指定属性：getDeclaredField(String name) </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//得到class类对象</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.blog.reflect.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用构造方法</span>Student student <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token punctuation">)</span>clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到私有的age属性</span>Field f3 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置为可访问的</span>f3<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用Field类中的set方法类似：setAge()</span>f3<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>student<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用Field类中的set方法类似：getAge()</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f3<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>&emsp;&emsp;&emsp;&emsp;2. 取得所有属性：getDeclaredFields() </p><pre class=" language-java"><code class="language-java">Field f4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Field field <span class="token operator">:</span> f4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="三、附：Student类内容如下："><a href="#三、附：Student类内容如下：" class="headerlink" title="三、附：Student类内容如下："></a>三、附：Student类内容如下：</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> Boolean sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Boolean sex<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是student的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeDiary</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"的日记内容"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span>String subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在学习"</span> <span class="token operator">+</span> subject<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> sex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"student类"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>String foot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"在吃"</span> <span class="token operator">+</span> foot<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="附：Person类内容如下："><a href="#附：Person类内容如下：" class="headerlink" title="附：Person类内容如下："></a>附：Person类内容如下：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>reflect<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String nationality <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span>String foot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java 反射基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo初体验</title>
      <link href="/2020/04/07/hexo%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2020/04/07/hexo%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>&emsp;&emsp;最近心血来潮，想自己鼓捣一个属于自己的小博客网站，奈何网站备案实在太麻烦<del>emmm实为囊中羞涩(・ε・｀）</del></p><h2 id="前期软件准备"><a href="#前期软件准备" class="headerlink" title="前期软件准备"></a>前期软件准备</h2><h3 id="1-git"><a href="#1-git" class="headerlink" title="1 git"></a>1 git</h3><p>&emsp;&emsp;软件下载地址：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></p><p>&emsp;&emsp;软件安装：选择合适的版本后下载，傻瓜式安装，一直next即可，安装完成后右键有git的选项即成功</p><h3 id="2-node-js"><a href="#2-node-js" class="headerlink" title="2 node.js"></a>2 node.js</h3><p>&emsp;&emsp;软件下载地址：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p><p>&emsp;&emsp;软件安装：根据自己需要，配置一些启动项，（一般会自动的添加path变量，未配置请自行配置）安装完后在git brush 输入node -v提示版本信息即安装成功</p><h3 id="3-npm"><a href="#3-npm" class="headerlink" title="3 npm"></a>3 npm</h3><p>&emsp;&emsp;在安装完node后会自动的安装好npm，不用自己再去安装</p><p>&emsp;&emsp;检测：在git brush输入npm -v提示版本信息安装成功</p><h3 id="4-安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定-多试几次）"><a href="#4-安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定-多试几次）" class="headerlink" title="4 安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定,多试几次）"></a>4 安装淘宝的镜像源（如果错误就重来，因为连接可能不稳定,多试几次）</h3><p>&emsp;&emsp;git brush输入：npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org回车即可安装" target="_blank" rel="noopener">https://registry.npm.taobao.org回车即可安装</a></p><p>&emsp;&emsp;检测：git brush输入cnpm返回cnpm的信息，输入cnpm -v返回cnpm的版本信息</p><h3 id="5-安装hexo（失败重试即可）"><a href="#5-安装hexo（失败重试即可）" class="headerlink" title="5 安装hexo（失败重试即可）"></a>5 安装hexo（失败重试即可）</h3><p>&emsp;&emsp;git brush输入：cnpm install -g hexo-cli 回车即可安装</p><p>&emsp;&emsp;检测：git brush输入hexo -v返回hexo的版本信息</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><ol><li>新建一个空文件夹</li><li>进入新建好的空文件夹</li><li>右键git brush输入hexo init</li><li>输入hexo s启动hexo服务</li><li>复制控制台中的<a href="http://localhost:4000在浏览器打开，即可看到hexo的默认主题">http://localhost:4000在浏览器打开，即可看到hexo的默认主题</a></li></ol><h2 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到github上</h2><h3 id="1-申请账号"><a href="#1-申请账号" class="headerlink" title="1 申请账号"></a>1 申请账号</h3><ol><li>申请github账号</li><li>新建github仓库（<span style="color: red;">注意：仓库名的格式必须是自己的账号昵称+.github.io</span>）</li><li>复制好shh地址</li></ol><h3 id="2-生成github密钥"><a href="#2-生成github密钥" class="headerlink" title="2 生成github密钥"></a>2 生成github密钥</h3><ul><li>1.在git中链接自己的仓库<ul><li>1.1 配置用户名：git config –global user.name ‘xxxxx’</li><li>1.2 配置邮箱：git config –global user.email ‘<a href="mailto:xxx@xx.xxx">xxx@xx.xxx</a>’</li></ul></li><li>2.检查是否已经生成ssh<ul><li>1.1 cd ~/.ssh：如果能进入到.ssh文件目录下 ，则证明，之前生成过.ssh秘钥，可以直接使用里面的秘钥。 如果没有则需要生成新的密钥</li></ul></li><li>3.生成密钥<ul><li>1.1 ssh-keygen -t rsa -C ‘<a href="mailto:xxx@xx.xxx">xxx@xx.xxx</a>’ //配置的邮箱</li><li>1.2 接着按3个回车</li></ul></li><li>4.成功结果<pre><code>  Generating public/private rsa key pair.  Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):  Enter passphrase (empty for no passphrase):  Enter same passphrase again:  Your identification has been saved in /c/Users/Administrator/.ssh/id_rsa.  Your public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub.  The key fingerprint is:  SHA256:zA6wNJrFB6NcqS6eBog/AHlzQuvFjYpG759Yhh1lWGI xxxxxx@xxxxx.xxx(上面自己的邮箱)  The key&#39;s randomart image is:  +---[RSA 2048]----+  |    +E .         |  | ..+oo+          |  | oo+*+.o         |  |o.*===+o         |  |==+*... S        |  |B.+.o .o         |  |++o. +  .        |  | +o.+ .          |  |.  o.o           |  +----[SHA256]-----+</code></pre>&emsp;&emsp;可以看到在c/Users/Administrator/.ssh/目录下生成了两个文件：id_rsa（私有密钥）和id_rsa.pub（公有密钥），使用记事本等软件打开id_rsa.pub文件，将里面的内容复制，粘贴到github的New SSH key</li></ul><h3 id="3-安装hexo部署插件"><a href="#3-安装hexo部署插件" class="headerlink" title="3 安装hexo部署插件"></a>3 安装hexo部署插件</h3><p>&emsp;&emsp;打开git brush输入cnpm install –save hexo-deployer-git</p><h3 id="4-修改新建文件下的-config-yml文件"><a href="#4-修改新建文件下的-config-yml文件" class="headerlink" title="4 修改新建文件下的_config.yml文件"></a>4 修改新建文件下的_config.yml文件</h3><p>&emsp;&emsp;找到以下代码，一般位于_config.yml文件的最后（原始的是没有repo，和branch的，而且type后面也没有东西）<br>对这段代码进行更改</p><pre><code>#Deployment#docs:https://hexo.io/docs/deployment.htmlE deploy    type: git   #一个名字，建议写成git方便识别，一般填git    repo: gitcgithub com: hansonpang9g/hansonpang99 githubio. git #填写ssh地址    branch: master  #分支，默认master</code></pre><h3 id="5-最后在Git-brush里面输入-hexo-d-将本地文件部署到github新建的仓库中"><a href="#5-最后在Git-brush里面输入-hexo-d-将本地文件部署到github新建的仓库中" class="headerlink" title="5 最后在Git brush里面输入 hexo d 将本地文件部署到github新建的仓库中"></a>5 最后在Git brush里面输入 hexo d 将本地文件部署到github新建的仓库中</h3><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><ol><li>下载主题 git clone 主题地址 themes/主题名</li><li>修改新建文件下的_config.yml文件，找到theme修改为自己的主题名</li><li>hexo clean清除编译好的静态网站</li><li>hexo g重新生成静态网站</li><li>hexo s部署到本地服务器，方便预览</li><li>hexo d部署到github服务器</li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 使用方法 笔记 hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first blog</title>
      <link href="/2020/04/04/my-first-blog/"/>
      <url>/2020/04/04/my-first-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown的初步使用"><a href="#markdown的初步使用" class="headerlink" title="markdown的初步使用"></a>markdown的初步使用</h1><h2 id="一、格式"><a href="#一、格式" class="headerlink" title="一、格式"></a>一、格式</h2><h3 id="1、标题的使用"><a href="#1、标题的使用" class="headerlink" title="1、标题的使用"></a>1、标题的使用</h3><p>&emsp;&emsp;在使用标题的时候只需要在前面加上#号即可，一个#是一级标题，三个#是三级标题，以此类推。支持六级标题。</p><p><font color="red">注：标准语法一般在#后跟个空格再写文字。否则极有可能生成不了标题</font></p><h3 id="2、段落的使用"><a href="#2、段落的使用" class="headerlink" title="2、段落的使用"></a>2、段落的使用</h3><p>&emsp;&emsp;Markdown的段落划分非常简单，直接在每个段落后面加上回车即可</p><h3 id="3、字体样式"><a href="#3、字体样式" class="headerlink" title="3、字体样式"></a>3、字体样式</h3><h4 id="a-加粗"><a href="#a-加粗" class="headerlink" title="a.加粗"></a>a.加粗</h4><p>&emsp;&emsp;要<strong>加粗</strong>的文字左右分别用两个*号包起来</p><h4 id="b-斜体"><a href="#b-斜体" class="headerlink" title="b.斜体"></a>b.斜体</h4><p>&emsp;&emsp;要<em>倾斜</em>的文字左右分别用一个*号包起来</p><h4 id="c-斜体加粗"><a href="#c-斜体加粗" class="headerlink" title="c.斜体加粗"></a>c.斜体加粗</h4><p>&emsp;&emsp;要<strong><em>加粗并倾斜</em></strong>的文字左右分别用三个*号包起来</p><h4 id="d-删除线"><a href="#d-删除线" class="headerlink" title="d.删除线"></a>d.删除线</h4><p>&emsp;&emsp;要<del>删除</del>的文字左右分别用两个~~号包起来</p><h3 id="4、区块引用"><a href="#4、区块引用" class="headerlink" title="4、区块引用"></a>4、区块引用</h3><p>&emsp;&emsp;如果我们需要对一段内容进行强调显示时，只需要在引用的文字前加&gt;即可。此外引用也可以嵌套，如：加两个&gt;&gt;三个&gt;&gt;&gt;</p><blockquote><p>这是一段引用的内容</p><blockquote><p>这也是一段引用的内容，只不过在前面加了两个&gt;被嵌套了</p></blockquote></blockquote><h3 id="5、分割线"><a href="#5、分割线" class="headerlink" title="5、分割线"></a>5、分割线</h3><p>&emsp;&emsp;在空白的地方加上三个或者三个以上的 - 或者 * 都可以。</p><pre><code>---***----****</code></pre><hr><h2 id="二、图片"><a href="#二、图片" class="headerlink" title="二、图片"></a>二、图片</h2><p>&emsp;&emsp;语法：</p><pre><code>![图片alt](图片地址 &#39;&#39;图片title&#39;&#39;)图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>&emsp;&emsp;例如：</p><pre><code>![&quot;金钱&quot;](https://desk-fd.zol-img.com.cn/t_s960x600c5/g5/M00/02/02/ChMkJlbKxaaIEb-jAAQVU_xtk6IAALHZAN0f1MABBVr708.jpg &quot;金钱&quot;)</code></pre><p><img src="https://desk-fd.zol-img.com.cn/t_s960x600c5/g5/M00/02/02/ChMkJlbKxaaIEb-jAAQVU_xtk6IAALHZAN0f1MABBVr708.jpg" alt="&quot;金钱&quot;" title="金钱" loading="lazy"></p><p>&emsp;&emsp;markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。<br>关于图床的选择我写了一篇文章，对网上存在的各种方法做了总结，需要的朋友可以看看<a href="https://www.jianshu.com/p/ea1eb11db63f" target="_blank" rel="noopener">markdown图床</a></p><h2 id="三、超链接"><a href="#三、超链接" class="headerlink" title="三、超链接"></a>三、超链接</h2><p>&emsp;&emsp;超连接用法示例（注：此功能在IE浏览器无法实现）</p><pre><code>[提示文字](连接地址)[百度](www.baidu.com)</code></pre><p>&emsp;&emsp;<br>    点击<a href="www.biadu.com">百度</a>一下</p><h2 id="四、列表"><a href="#四、列表" class="headerlink" title="四、列表"></a>四、列表</h2><h3 id="1、无序列表"><a href="#1、无序列表" class="headerlink" title="1、无序列表"></a>1、无序列表</h3><p>&emsp;&emsp;示例</p><pre><code>使用无序列表有三种方式- 列表文本前使用 减号+空格+ 列表文本前使用 加号+空格* 列表文本前使用 星号+空格</code></pre><p>&emsp;&emsp;效果</p><ul><li>这是减号+空格</li></ul><ul><li>这是加号+空格</li></ul><ul><li>这是星号+空格</li></ul><h3 id="2、有序列表"><a href="#2、有序列表" class="headerlink" title="2、有序列表"></a>2、有序列表</h3><p>&emsp;&emsp;示例</p><pre><code>列表前使用 数字+点+空格不用担心数字不对，markdown会自动识别</code></pre><p>&emsp;&emsp;效果</p><ol><li>这是1.</li><li>这也是1.</li></ol><h2 id="五、代码域"><a href="#五、代码域" class="headerlink" title="五、代码域"></a>五、代码域</h2><p>&emsp;&emsp;markdown里对代码块的引用语法是三个撇[ ``` ],在其后可增加代码名称,比如java,js等标记该部分代码的类型.之后在页面展现的时候就可以高亮显示关键字了。记得在结束的位置也加上三个撇，防止后面的文字被识别为代码，比如下面这段代码:</p><pre><code>（```）java    public class Test{        public static void main(String[] args) {            System.out.println(&quot;hallo word&quot;);        }    }（```）</code></pre><p>&emsp;&emsp;效果如下</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hallo word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="六、推荐阅读"><a href="#六、推荐阅读" class="headerlink" title="六、推荐阅读"></a>六、推荐阅读</h2><p>&emsp;&emsp;markdown官方文档<br>&emsp;&emsp;<a href="https://markdown.tw/" target="_blank" rel="noopener">https://markdown.tw/</a></p><p>&emsp;&emsp;markdown标准<br>&emsp;&emsp;<a href="https://commonmark.org/help/" target="_blank" rel="noopener">https://commonmark.org/help/</a></p><p>&emsp;&emsp;github的markdown标准<br>&emsp;&emsp;<a href="https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown" target="_blank" rel="noopener">https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新手 Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
